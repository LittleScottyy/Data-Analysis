{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":1469501,"sourceType":"datasetVersion","datasetId":861950},{"sourceId":1882037,"sourceType":"datasetVersion","datasetId":1120859},{"sourceId":1887011,"sourceType":"datasetVersion","datasetId":1124051},{"sourceId":7003111,"sourceType":"datasetVersion","datasetId":3276334},{"sourceId":7539897,"sourceType":"datasetVersion","datasetId":4390452}],"dockerImageVersionId":30761,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"# Feature Engineering\n## Feature Preprocessing\n### Definition: Updating and transforming the existing features\n#### - Feature transformation [For continuous variable]\n<p>When to apply: relationship between target variable and feature are non-linear.</p>\n\n<p>How to apply:\n\n    `Positive skewed distribution: square of cube root or log`\n\n    `Left skewed distribution: square cube or exponential`\n\n    ***Input must be greater than 0. Exp: Log(X+C)***</p>\n\n#### - Feature scaling [For continuous variable]\n<p>When to apply: variables are all in different units.</p>\n<p>Exp: loan amount is in thousands, income is in hundreds and Emi is in dollars only</p>\n\nHow to apply:\n\n`Min-Max Scaler:`\n\n![Capture.PNG](attachment:2471bbcf-afb6-4790-866f-689c01f19d6f.PNG)\n\n`Standard Scaler:`\n\n![Capture2.PNG](attachment:233dcdea-831f-4a3e-b239-763898a14efe.PNG)\n\n- One Hot Encoding (also known as dummies encoding) [For categorical variable]\n- Label Encoding\n\n| Column Names | One-Hot Encoding | Label Encoding |\n| -------- | ------- | -------- |\n| Description | Converts each unique category value into a new binary column. | Assigns each unique category value an integer. |\n| Example | “India” -> [1, 0, 0] <br> “Japan” -> [0, 1, 0] <br> “USA” -> [0, 0, 1] | “India” -> 0 <br> “Japan” -> 1 <br> “USA” -> 2 |\n| When to Use | Non-ordinal categorical features. Manageable number of unique categories. | Ordinal categorical features. Large number of unique categories. |\n| Advantages | - Prevents the model from assuming any inherent order. | - Simple and efficient for ordinal data. <br> - Does not increase dimensionality. |\n| Disadvantages | - Can lead to high dimensionality with many unique categories. | - Imposes an arbitrary order on non-ordinal data. <br> - Model might assume false relationships. |\n\nKey Takeaways:\n- Label encoding assigns integers to categories, but can imply false ordinal relationships\n- One-hot encoding creates binary columns for each category, avoiding implied ordering\n- Choose encoding method based on data type (ordinal vs. nominal) and number of categories\n\n#### - Combining Sparse Class\n| Description | Assign a large quantity of unique category with value an integer by specifying the requirement |\n| ------- | ------- |\n| Example | Country: \"Mumbai\", \"Jaipur\", \"Ahmedabad\", \"Indore\", \"Raipur\", \"Guwahati\",... <br> **\"Ahmedabad\", \"Indore\", \"Raipur\", \"Guwahati\" are having low frequency** <br> [\"Ahmedabad\", \"Indore\", \"Raipur\", \"Guwahati\"] -> Others |\n| When to use | Non-ordinal categorical features. Larger number of unique categories |\n| Advantages | - Avoid from too many variables are created <br> - Does not explode the dimensionality |\n| Disadvantages | |\n\n## Feature Generation\n### Definition: Creating new features from the excisting data\n#### - [Binning](#Binning) (Better way to do binning: [Binning Using Decision Tree Split](#DecisionTreeSplit))\n| Description | Assign different range of values into different categories|\n| ------- | ------- |\n| Example | bins = [0,12,19,30,60,90] <br> group = ['child','teenager','young_adult','middle_aged','senior_citizen'] |\n| When to use | Ordinal categorical features. Larger number of unique categories |\n| Advantages | |\n| Disadvantages | |\n\n#### - [Feature Interaction](#FeatureInteraction)\n- Addition\n- Ratio\n- Difference\n\n#### - [Missing Values](#MissingValues)\n\n#### - [Frequency Coding](#FrequencyCoding)\n\n## [Feature Engineering with Datetime](#Datetime)\n\n# [Automated Feature Engineering](#AutomatedFeatureEngineering)\n| Library | Featuretools |\n| ------- | ------- |\n| Components | - Entities <br> - Feature Primitives <br> - Deep Feature Synthesis <br> Library: Use `featuretools` |\n\nURL: https://www.youtube.com/watch?v=uu8um0JmYA8&t=2212s\n\n","metadata":{},"attachments":{"2471bbcf-afb6-4790-866f-689c01f19d6f.PNG":{"image/png":""},"233dcdea-831f-4a3e-b239-763898a14efe.PNG":{"image/png":"iVBORw0KGgoAAAANSUhEUgAAAMsAAABfCAYAAABGDDNmAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAAEnQAABJ0Ad5mH3gAABNwSURBVHhe7d0FlJTV+wdwRf3ZgSLYgKgIBnZieyzs7sDE7kKxRfSo2N0tKrZiYXd3d2F36/2fz/1zcVhnh9llWGZm7/ece5bdeWeY9773e59+7jghIyOjLGSyZGSUiUyWjIwykcmSkVEmMlkyMspEJktGzeGPP/4IH3/8cXjiiSfCQw89VPZ4+umnw/vvvx9+/vnn4Z/UNGSyZNQcvvvuu3D11VeHNdZYI/Ts2TMstdRSJYdrjA033DCcc8454d133x3+SU1DJktGzeGbb74Jl19+eejVq1dYcsklwxJLLFFyLL744vHnWmutFU477bTwzjvvDP+kkfHPP//8ZxQikyWj5vDbb79Fdeqxxx4L999/fxg6dGjJcd9998XxyCOPhDfeeCP8+OOPwz9pZGSyZGSUiUyWGoaH9ffff4e//vorGrW///57/On39CDTQ/3zzz/ja356T2uA+3TPaTS8d/NirtLc+HcppLlMoyEyWaoYHhiCfPnll+HVV18NTz31VFQjvv3227gA0jU//fRTeO+998Lzzz8f3nrrrfD999/XPWHSfbM/nn322Xjvn3zySfj111+HX/H/XrMvvvgizt0LL7wQPvroo6jCNYZiBClEJkuVwoP74YcforvzoosuCocddljYbbfdwhFHHBEGDx4cXn/99egCHTZsWLj33nvDySefHPbbb7/Qv3//cPPNN0ePD6LVI9wXm+XWW28Nxx9/fNhjjz3CXnvtFU4//fToIjYnv/zySyTJpZdeGufswAMPDGeccUZ44IEHIoGag0yWKgSp4YHecsstYeuttw6rrrpq2GKLLcKmm24aVlpppbDccsuFPffcM9x4442RSL179w4bbbRRfH355ZcPyyyzTDj88MPDm2++OcrdspbgXpCAFEGAlVdeOay77rrxvnm6uIfXXnvt6PEyd3379g2rr7562HLLLePfecW4j2+66aYodZqKTJYqA/WJ2nXdddfFRbDKKquEY489Ntx1113Rs0NydOvWLUw55ZTx4Xt9m222Ceeee24466yzwoorrhjGH3/8MO+884brr7++rqSLe3nppZfC0UcfHTeN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"}}},{"cell_type":"markdown","source":"<a id='Binning'></a>\n#### Binning","metadata":{}},{"cell_type":"code","source":"# Binning\nimport pandas as pd\n\nstroke_data = pd.read_csv('/kaggle/input/stroke-prediction-dataset/healthcare-dataset-stroke-data.csv')\nstroke_data.head()","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-09-17T15:24:10.910644Z","iopub.execute_input":"2024-09-17T15:24:10.911586Z","iopub.status.idle":"2024-09-17T15:24:10.986450Z","shell.execute_reply.started":"2024-09-17T15:24:10.911531Z","shell.execute_reply":"2024-09-17T15:24:10.985149Z"},"trusted":true},"execution_count":54,"outputs":[{"execution_count":54,"output_type":"execute_result","data":{"text/plain":"      id  gender   age  hypertension  heart_disease ever_married  \\\n0   9046    Male  67.0             0              1          Yes   \n1  51676  Female  61.0             0              0          Yes   \n2  31112    Male  80.0             0              1          Yes   \n3  60182  Female  49.0             0              0          Yes   \n4   1665  Female  79.0             1              0          Yes   \n\n       work_type Residence_type  avg_glucose_level   bmi   smoking_status  \\\n0        Private          Urban             228.69  36.6  formerly smoked   \n1  Self-employed          Rural             202.21   NaN     never smoked   \n2        Private          Rural             105.92  32.5     never smoked   \n3        Private          Urban             171.23  34.4           smokes   \n4  Self-employed          Rural             174.12  24.0     never smoked   \n\n   stroke  \n0       1  \n1       1  \n2       1  \n3       1  \n4       1  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>gender</th>\n      <th>age</th>\n      <th>hypertension</th>\n      <th>heart_disease</th>\n      <th>ever_married</th>\n      <th>work_type</th>\n      <th>Residence_type</th>\n      <th>avg_glucose_level</th>\n      <th>bmi</th>\n      <th>smoking_status</th>\n      <th>stroke</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>9046</td>\n      <td>Male</td>\n      <td>67.0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>Yes</td>\n      <td>Private</td>\n      <td>Urban</td>\n      <td>228.69</td>\n      <td>36.6</td>\n      <td>formerly smoked</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>51676</td>\n      <td>Female</td>\n      <td>61.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>Yes</td>\n      <td>Self-employed</td>\n      <td>Rural</td>\n      <td>202.21</td>\n      <td>NaN</td>\n      <td>never smoked</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>31112</td>\n      <td>Male</td>\n      <td>80.0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>Yes</td>\n      <td>Private</td>\n      <td>Rural</td>\n      <td>105.92</td>\n      <td>32.5</td>\n      <td>never smoked</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>60182</td>\n      <td>Female</td>\n      <td>49.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>Yes</td>\n      <td>Private</td>\n      <td>Urban</td>\n      <td>171.23</td>\n      <td>34.4</td>\n      <td>smokes</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1665</td>\n      <td>Female</td>\n      <td>79.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>Yes</td>\n      <td>Self-employed</td>\n      <td>Rural</td>\n      <td>174.12</td>\n      <td>24.0</td>\n      <td>never smoked</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"#Creating Bins\nbins = [0,12,19,30,60,90]\ngroup = ['child','teenager','young_adult','middle_aged','senior_citizen']\nstroke_data['age_category'] = pd.cut(stroke_data['age'], bins, labels=group)","metadata":{"execution":{"iopub.status.busy":"2024-09-17T15:24:10.988817Z","iopub.execute_input":"2024-09-17T15:24:10.989209Z","iopub.status.idle":"2024-09-17T15:24:11.000572Z","shell.execute_reply.started":"2024-09-17T15:24:10.989167Z","shell.execute_reply":"2024-09-17T15:24:10.998939Z"},"trusted":true},"execution_count":55,"outputs":[]},{"cell_type":"code","source":"stroke_data[['age', 'age_category']].head()","metadata":{"execution":{"iopub.status.busy":"2024-09-17T15:24:11.002214Z","iopub.execute_input":"2024-09-17T15:24:11.002621Z","iopub.status.idle":"2024-09-17T15:24:11.026623Z","shell.execute_reply.started":"2024-09-17T15:24:11.002578Z","shell.execute_reply":"2024-09-17T15:24:11.024477Z"},"trusted":true},"execution_count":56,"outputs":[{"execution_count":56,"output_type":"execute_result","data":{"text/plain":"    age    age_category\n0  67.0  senior_citizen\n1  61.0  senior_citizen\n2  80.0  senior_citizen\n3  49.0     middle_aged\n4  79.0  senior_citizen","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>age</th>\n      <th>age_category</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>67.0</td>\n      <td>senior_citizen</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>61.0</td>\n      <td>senior_citizen</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>80.0</td>\n      <td>senior_citizen</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>49.0</td>\n      <td>middle_aged</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>79.0</td>\n      <td>senior_citizen</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":"<a id='DecisionTreeSplit'></a>\n#### Binning Using Decision Tree Split","metadata":{}},{"cell_type":"code","source":"import numpy as np\nfrom sklearn.tree import DecisionTreeRegressor\n\n# Feature (age) and target (stroke) - you can adjust this based on your use case\nX = stroke_data[['age']]  # Feature: Age\ny = stroke_data['stroke'] # Target: Stroke\n\ntree = DecisionTreeRegressor(max_leaf_nodes=5)  # Adjust max_leaf_nodes as per requirement\ntree.fit(X, y)\n\n# Extract split points from the decision tree\nsplit_points = np.sort(tree.tree_.threshold[tree.tree_.threshold != -2])  # Removing invalid split points (-2)\n\n# Include 0 as the lower bound\nsplit_points = np.concatenate(([0], split_points))\n\nprint(\"Split Points:\", split_points)","metadata":{"execution":{"iopub.status.busy":"2024-09-17T15:24:11.030343Z","iopub.execute_input":"2024-09-17T15:24:11.030919Z","iopub.status.idle":"2024-09-17T15:24:11.055469Z","shell.execute_reply.started":"2024-09-17T15:24:11.030857Z","shell.execute_reply":"2024-09-17T15:24:11.053380Z"},"trusted":true},"execution_count":57,"outputs":[{"name":"stdout","text":"Split Points: [ 0.  44.5 53.5 67.5 75.5]\n","output_type":"stream"}]},{"cell_type":"code","source":"# Bin the age data using the split points\nstroke_data['age_binned'] = np.digitize(stroke_data['age'], bins=split_points, right=False)\n\n# Output the DataFrame with binned age\nprint(stroke_data[['age', 'age_binned']])","metadata":{"execution":{"iopub.status.busy":"2024-09-17T15:24:11.057220Z","iopub.execute_input":"2024-09-17T15:24:11.057830Z","iopub.status.idle":"2024-09-17T15:24:11.075117Z","shell.execute_reply.started":"2024-09-17T15:24:11.057763Z","shell.execute_reply":"2024-09-17T15:24:11.073751Z"},"trusted":true},"execution_count":58,"outputs":[{"name":"stdout","text":"       age  age_binned\n0     67.0           3\n1     61.0           3\n2     80.0           5\n3     49.0           2\n4     79.0           5\n...    ...         ...\n5105  80.0           5\n5106  81.0           5\n5107  35.0           1\n5108  51.0           2\n5109  44.0           1\n\n[5110 rows x 2 columns]\n","output_type":"stream"}]},{"cell_type":"markdown","source":"<a id='FeatureInteraction'></a>\n#### Feature Interaction","metadata":{}},{"cell_type":"code","source":"# Load Loan Prediction Dataset\nimport pandas as pd\n\nloan_data = pd.read_csv('/kaggle/input/loan-status-prediction/loan_data.csv')\nloan_data.head()","metadata":{"execution":{"iopub.status.busy":"2024-09-17T15:24:11.076575Z","iopub.execute_input":"2024-09-17T15:24:11.077003Z","iopub.status.idle":"2024-09-17T15:24:11.123669Z","shell.execute_reply.started":"2024-09-17T15:24:11.076957Z","shell.execute_reply":"2024-09-17T15:24:11.122239Z"},"trusted":true},"execution_count":59,"outputs":[{"execution_count":59,"output_type":"execute_result","data":{"text/plain":"    Loan_ID Gender Married Dependents     Education Self_Employed  \\\n0  LP001003   Male     Yes          1      Graduate            No   \n1  LP001005   Male     Yes          0      Graduate           Yes   \n2  LP001006   Male     Yes          0  Not Graduate            No   \n3  LP001008   Male      No          0      Graduate            No   \n4  LP001013   Male     Yes          0  Not Graduate            No   \n\n   ApplicantIncome  CoapplicantIncome  LoanAmount  Loan_Amount_Term  \\\n0             4583             1508.0       128.0             360.0   \n1             3000                0.0        66.0             360.0   \n2             2583             2358.0       120.0             360.0   \n3             6000                0.0       141.0             360.0   \n4             2333             1516.0        95.0             360.0   \n\n   Credit_History Property_Area Loan_Status  \n0             1.0         Rural           N  \n1             1.0         Urban           Y  \n2             1.0         Urban           Y  \n3             1.0         Urban           Y  \n4             1.0         Urban           Y  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Loan_ID</th>\n      <th>Gender</th>\n      <th>Married</th>\n      <th>Dependents</th>\n      <th>Education</th>\n      <th>Self_Employed</th>\n      <th>ApplicantIncome</th>\n      <th>CoapplicantIncome</th>\n      <th>LoanAmount</th>\n      <th>Loan_Amount_Term</th>\n      <th>Credit_History</th>\n      <th>Property_Area</th>\n      <th>Loan_Status</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>LP001003</td>\n      <td>Male</td>\n      <td>Yes</td>\n      <td>1</td>\n      <td>Graduate</td>\n      <td>No</td>\n      <td>4583</td>\n      <td>1508.0</td>\n      <td>128.0</td>\n      <td>360.0</td>\n      <td>1.0</td>\n      <td>Rural</td>\n      <td>N</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>LP001005</td>\n      <td>Male</td>\n      <td>Yes</td>\n      <td>0</td>\n      <td>Graduate</td>\n      <td>Yes</td>\n      <td>3000</td>\n      <td>0.0</td>\n      <td>66.0</td>\n      <td>360.0</td>\n      <td>1.0</td>\n      <td>Urban</td>\n      <td>Y</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>LP001006</td>\n      <td>Male</td>\n      <td>Yes</td>\n      <td>0</td>\n      <td>Not Graduate</td>\n      <td>No</td>\n      <td>2583</td>\n      <td>2358.0</td>\n      <td>120.0</td>\n      <td>360.0</td>\n      <td>1.0</td>\n      <td>Urban</td>\n      <td>Y</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>LP001008</td>\n      <td>Male</td>\n      <td>No</td>\n      <td>0</td>\n      <td>Graduate</td>\n      <td>No</td>\n      <td>6000</td>\n      <td>0.0</td>\n      <td>141.0</td>\n      <td>360.0</td>\n      <td>1.0</td>\n      <td>Urban</td>\n      <td>Y</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>LP001013</td>\n      <td>Male</td>\n      <td>Yes</td>\n      <td>0</td>\n      <td>Not Graduate</td>\n      <td>No</td>\n      <td>2333</td>\n      <td>1516.0</td>\n      <td>95.0</td>\n      <td>360.0</td>\n      <td>1.0</td>\n      <td>Urban</td>\n      <td>Y</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"# Feature 1 - Total Income\nloan_data['Total_income'] = loan_data['ApplicantIncome'] + loan_data['CoapplicantIncome']\nloan_data[['ApplicantIncome','CoapplicantIncome','Total_income']].head()\n\n# Feature 2 - Loan amount and Income ratio\nloan_data['loan_income_ratio'] = loan_data['LoanAmount'] / loan_data['ApplicantIncome']\nloan_data[['ApplicantIncome','LoanAmount','loan_income_ratio']].head()","metadata":{"execution":{"iopub.status.busy":"2024-09-17T15:24:11.125607Z","iopub.execute_input":"2024-09-17T15:24:11.126131Z","iopub.status.idle":"2024-09-17T15:24:11.145193Z","shell.execute_reply.started":"2024-09-17T15:24:11.126069Z","shell.execute_reply":"2024-09-17T15:24:11.143831Z"},"trusted":true},"execution_count":60,"outputs":[{"execution_count":60,"output_type":"execute_result","data":{"text/plain":"   ApplicantIncome  LoanAmount  loan_income_ratio\n0             4583       128.0           0.027929\n1             3000        66.0           0.022000\n2             2583       120.0           0.046458\n3             6000       141.0           0.023500\n4             2333        95.0           0.040720","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>ApplicantIncome</th>\n      <th>LoanAmount</th>\n      <th>loan_income_ratio</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>4583</td>\n      <td>128.0</td>\n      <td>0.027929</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>3000</td>\n      <td>66.0</td>\n      <td>0.022000</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2583</td>\n      <td>120.0</td>\n      <td>0.046458</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>6000</td>\n      <td>141.0</td>\n      <td>0.023500</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2333</td>\n      <td>95.0</td>\n      <td>0.040720</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":"<a id='MissingValues'></a>\n#### Missing Values","metadata":{}},{"cell_type":"code","source":"import pandas as pd\n\nimport warnings\nwarnings.filterwarnings('ignore')","metadata":{"execution":{"iopub.status.busy":"2024-09-17T15:24:11.146825Z","iopub.execute_input":"2024-09-17T15:24:11.147297Z","iopub.status.idle":"2024-09-17T15:24:11.157045Z","shell.execute_reply.started":"2024-09-17T15:24:11.147249Z","shell.execute_reply":"2024-09-17T15:24:11.155566Z"},"trusted":true},"execution_count":61,"outputs":[]},{"cell_type":"code","source":"stroke_data = pd.read_csv('/kaggle/input/stroke-prediction-dataset/healthcare-dataset-stroke-data.csv')\nstroke_data.head()","metadata":{"execution":{"iopub.status.busy":"2024-09-17T15:24:11.158888Z","iopub.execute_input":"2024-09-17T15:24:11.159464Z","iopub.status.idle":"2024-09-17T15:24:11.201388Z","shell.execute_reply.started":"2024-09-17T15:24:11.159407Z","shell.execute_reply":"2024-09-17T15:24:11.200199Z"},"trusted":true},"execution_count":62,"outputs":[{"execution_count":62,"output_type":"execute_result","data":{"text/plain":"      id  gender   age  hypertension  heart_disease ever_married  \\\n0   9046    Male  67.0             0              1          Yes   \n1  51676  Female  61.0             0              0          Yes   \n2  31112    Male  80.0             0              1          Yes   \n3  60182  Female  49.0             0              0          Yes   \n4   1665  Female  79.0             1              0          Yes   \n\n       work_type Residence_type  avg_glucose_level   bmi   smoking_status  \\\n0        Private          Urban             228.69  36.6  formerly smoked   \n1  Self-employed          Rural             202.21   NaN     never smoked   \n2        Private          Rural             105.92  32.5     never smoked   \n3        Private          Urban             171.23  34.4           smokes   \n4  Self-employed          Rural             174.12  24.0     never smoked   \n\n   stroke  \n0       1  \n1       1  \n2       1  \n3       1  \n4       1  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>gender</th>\n      <th>age</th>\n      <th>hypertension</th>\n      <th>heart_disease</th>\n      <th>ever_married</th>\n      <th>work_type</th>\n      <th>Residence_type</th>\n      <th>avg_glucose_level</th>\n      <th>bmi</th>\n      <th>smoking_status</th>\n      <th>stroke</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>9046</td>\n      <td>Male</td>\n      <td>67.0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>Yes</td>\n      <td>Private</td>\n      <td>Urban</td>\n      <td>228.69</td>\n      <td>36.6</td>\n      <td>formerly smoked</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>51676</td>\n      <td>Female</td>\n      <td>61.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>Yes</td>\n      <td>Self-employed</td>\n      <td>Rural</td>\n      <td>202.21</td>\n      <td>NaN</td>\n      <td>never smoked</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>31112</td>\n      <td>Male</td>\n      <td>80.0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>Yes</td>\n      <td>Private</td>\n      <td>Rural</td>\n      <td>105.92</td>\n      <td>32.5</td>\n      <td>never smoked</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>60182</td>\n      <td>Female</td>\n      <td>49.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>Yes</td>\n      <td>Private</td>\n      <td>Urban</td>\n      <td>171.23</td>\n      <td>34.4</td>\n      <td>smokes</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1665</td>\n      <td>Female</td>\n      <td>79.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>Yes</td>\n      <td>Self-employed</td>\n      <td>Rural</td>\n      <td>174.12</td>\n      <td>24.0</td>\n      <td>never smoked</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"stroke_data.isnull().sum()","metadata":{"execution":{"iopub.status.busy":"2024-09-17T15:24:11.207258Z","iopub.execute_input":"2024-09-17T15:24:11.207682Z","iopub.status.idle":"2024-09-17T15:24:11.221212Z","shell.execute_reply.started":"2024-09-17T15:24:11.207639Z","shell.execute_reply":"2024-09-17T15:24:11.219928Z"},"trusted":true},"execution_count":63,"outputs":[{"execution_count":63,"output_type":"execute_result","data":{"text/plain":"id                     0\ngender                 0\nage                    0\nhypertension           0\nheart_disease          0\never_married           0\nwork_type              0\nResidence_type         0\navg_glucose_level      0\nbmi                  201\nsmoking_status         0\nstroke                 0\ndtype: int64"},"metadata":{}}]},{"cell_type":"code","source":"stroke_data['bmi_NA'] = stroke_data['bmi'].isnull()*1\nstroke_data[['bmi', 'bmi_NA']].head()","metadata":{"execution":{"iopub.status.busy":"2024-09-17T15:24:11.222775Z","iopub.execute_input":"2024-09-17T15:24:11.223277Z","iopub.status.idle":"2024-09-17T15:24:11.245954Z","shell.execute_reply.started":"2024-09-17T15:24:11.223219Z","shell.execute_reply":"2024-09-17T15:24:11.244593Z"},"trusted":true},"execution_count":64,"outputs":[{"execution_count":64,"output_type":"execute_result","data":{"text/plain":"    bmi  bmi_NA\n0  36.6       0\n1   NaN       1\n2  32.5       0\n3  34.4       0\n4  24.0       0","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>bmi</th>\n      <th>bmi_NA</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>36.6</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>NaN</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>32.5</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>34.4</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>24.0</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":"<a id='FrequencyCoding'></a>\n#### Frequency Coding","metadata":{}},{"cell_type":"code","source":"import pandas as pd\n\nbigmart = pd.read_csv('/kaggle/input/big-mart-sales-dataset/Train.csv')\nbigmart.head()","metadata":{"execution":{"iopub.status.busy":"2024-09-17T15:24:11.247570Z","iopub.execute_input":"2024-09-17T15:24:11.248020Z","iopub.status.idle":"2024-09-17T15:24:11.303362Z","shell.execute_reply.started":"2024-09-17T15:24:11.247973Z","shell.execute_reply":"2024-09-17T15:24:11.301829Z"},"trusted":true},"execution_count":65,"outputs":[{"execution_count":65,"output_type":"execute_result","data":{"text/plain":"  Item_Identifier  Item_Weight Item_Fat_Content  Item_Visibility  \\\n0           FDA15         9.30          Low Fat         0.016047   \n1           DRC01         5.92          Regular         0.019278   \n2           FDN15        17.50          Low Fat         0.016760   \n3           FDX07        19.20          Regular         0.000000   \n4           NCD19         8.93          Low Fat         0.000000   \n\n               Item_Type  Item_MRP Outlet_Identifier  \\\n0                  Dairy  249.8092            OUT049   \n1            Soft Drinks   48.2692            OUT018   \n2                   Meat  141.6180            OUT049   \n3  Fruits and Vegetables  182.0950            OUT010   \n4              Household   53.8614            OUT013   \n\n   Outlet_Establishment_Year Outlet_Size Outlet_Location_Type  \\\n0                       1999      Medium               Tier 1   \n1                       2009      Medium               Tier 3   \n2                       1999      Medium               Tier 1   \n3                       1998         NaN               Tier 3   \n4                       1987        High               Tier 3   \n\n         Outlet_Type  Item_Outlet_Sales  \n0  Supermarket Type1          3735.1380  \n1  Supermarket Type2           443.4228  \n2  Supermarket Type1          2097.2700  \n3      Grocery Store           732.3800  \n4  Supermarket Type1           994.7052  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Item_Identifier</th>\n      <th>Item_Weight</th>\n      <th>Item_Fat_Content</th>\n      <th>Item_Visibility</th>\n      <th>Item_Type</th>\n      <th>Item_MRP</th>\n      <th>Outlet_Identifier</th>\n      <th>Outlet_Establishment_Year</th>\n      <th>Outlet_Size</th>\n      <th>Outlet_Location_Type</th>\n      <th>Outlet_Type</th>\n      <th>Item_Outlet_Sales</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>FDA15</td>\n      <td>9.30</td>\n      <td>Low Fat</td>\n      <td>0.016047</td>\n      <td>Dairy</td>\n      <td>249.8092</td>\n      <td>OUT049</td>\n      <td>1999</td>\n      <td>Medium</td>\n      <td>Tier 1</td>\n      <td>Supermarket Type1</td>\n      <td>3735.1380</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>DRC01</td>\n      <td>5.92</td>\n      <td>Regular</td>\n      <td>0.019278</td>\n      <td>Soft Drinks</td>\n      <td>48.2692</td>\n      <td>OUT018</td>\n      <td>2009</td>\n      <td>Medium</td>\n      <td>Tier 3</td>\n      <td>Supermarket Type2</td>\n      <td>443.4228</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>FDN15</td>\n      <td>17.50</td>\n      <td>Low Fat</td>\n      <td>0.016760</td>\n      <td>Meat</td>\n      <td>141.6180</td>\n      <td>OUT049</td>\n      <td>1999</td>\n      <td>Medium</td>\n      <td>Tier 1</td>\n      <td>Supermarket Type1</td>\n      <td>2097.2700</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>FDX07</td>\n      <td>19.20</td>\n      <td>Regular</td>\n      <td>0.000000</td>\n      <td>Fruits and Vegetables</td>\n      <td>182.0950</td>\n      <td>OUT010</td>\n      <td>1998</td>\n      <td>NaN</td>\n      <td>Tier 3</td>\n      <td>Grocery Store</td>\n      <td>732.3800</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>NCD19</td>\n      <td>8.93</td>\n      <td>Low Fat</td>\n      <td>0.000000</td>\n      <td>Household</td>\n      <td>53.8614</td>\n      <td>OUT013</td>\n      <td>1987</td>\n      <td>High</td>\n      <td>Tier 3</td>\n      <td>Supermarket Type1</td>\n      <td>994.7052</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"bigmart['Item_Type'].value_counts()","metadata":{"execution":{"iopub.status.busy":"2024-09-17T15:24:11.305305Z","iopub.execute_input":"2024-09-17T15:24:11.305762Z","iopub.status.idle":"2024-09-17T15:24:11.318129Z","shell.execute_reply.started":"2024-09-17T15:24:11.305685Z","shell.execute_reply":"2024-09-17T15:24:11.316838Z"},"trusted":true},"execution_count":66,"outputs":[{"execution_count":66,"output_type":"execute_result","data":{"text/plain":"Item_Type\nFruits and Vegetables    1232\nSnack Foods              1200\nHousehold                 910\nFrozen Foods              856\nDairy                     682\nCanned                    649\nBaking Goods              648\nHealth and Hygiene        520\nSoft Drinks               445\nMeat                      425\nBreads                    251\nHard Drinks               214\nOthers                    169\nStarchy Foods             148\nBreakfast                 110\nSeafood                    64\nName: count, dtype: int64"},"metadata":{}}]},{"cell_type":"code","source":"temp = bigmart['Item_Type'].value_counts()\ntemp.head()","metadata":{"execution":{"iopub.status.busy":"2024-09-17T15:24:11.320260Z","iopub.execute_input":"2024-09-17T15:24:11.320801Z","iopub.status.idle":"2024-09-17T15:24:11.336911Z","shell.execute_reply.started":"2024-09-17T15:24:11.320721Z","shell.execute_reply":"2024-09-17T15:24:11.335558Z"},"trusted":true},"execution_count":67,"outputs":[{"execution_count":67,"output_type":"execute_result","data":{"text/plain":"Item_Type\nFruits and Vegetables    1232\nSnack Foods              1200\nHousehold                 910\nFrozen Foods              856\nDairy                     682\nName: count, dtype: int64"},"metadata":{}}]},{"cell_type":"code","source":"bigmart['Item_type_count'] = bigmart['Item_Type'].apply(lambda x:temp[x])\nbigmart[['Item_Identifier', 'Item_Type', 'Item_type_count']].head()","metadata":{"execution":{"iopub.status.busy":"2024-09-17T15:24:11.338659Z","iopub.execute_input":"2024-09-17T15:24:11.339164Z","iopub.status.idle":"2024-09-17T15:24:11.442375Z","shell.execute_reply.started":"2024-09-17T15:24:11.339118Z","shell.execute_reply":"2024-09-17T15:24:11.440854Z"},"trusted":true},"execution_count":68,"outputs":[{"execution_count":68,"output_type":"execute_result","data":{"text/plain":"  Item_Identifier              Item_Type  Item_type_count\n0           FDA15                  Dairy              682\n1           DRC01            Soft Drinks              445\n2           FDN15                   Meat              425\n3           FDX07  Fruits and Vegetables             1232\n4           NCD19              Household              910","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Item_Identifier</th>\n      <th>Item_Type</th>\n      <th>Item_type_count</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>FDA15</td>\n      <td>Dairy</td>\n      <td>682</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>DRC01</td>\n      <td>Soft Drinks</td>\n      <td>445</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>FDN15</td>\n      <td>Meat</td>\n      <td>425</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>FDX07</td>\n      <td>Fruits and Vegetables</td>\n      <td>1232</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>NCD19</td>\n      <td>Household</td>\n      <td>910</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":"#### Mean Encoding (Using Target Variable)","metadata":{}},{"cell_type":"code","source":"bigmart[['Item_Type', 'Item_Outlet_Sales']].head()","metadata":{"execution":{"iopub.status.busy":"2024-09-17T15:24:11.444216Z","iopub.execute_input":"2024-09-17T15:24:11.444639Z","iopub.status.idle":"2024-09-17T15:24:11.460807Z","shell.execute_reply.started":"2024-09-17T15:24:11.444594Z","shell.execute_reply":"2024-09-17T15:24:11.459046Z"},"trusted":true},"execution_count":69,"outputs":[{"execution_count":69,"output_type":"execute_result","data":{"text/plain":"               Item_Type  Item_Outlet_Sales\n0                  Dairy          3735.1380\n1            Soft Drinks           443.4228\n2                   Meat          2097.2700\n3  Fruits and Vegetables           732.3800\n4              Household           994.7052","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Item_Type</th>\n      <th>Item_Outlet_Sales</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Dairy</td>\n      <td>3735.1380</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Soft Drinks</td>\n      <td>443.4228</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Meat</td>\n      <td>2097.2700</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Fruits and Vegetables</td>\n      <td>732.3800</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Household</td>\n      <td>994.7052</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"bigmart.groupby('Item_Type')['Item_Outlet_Sales'].mean()","metadata":{"execution":{"iopub.status.busy":"2024-09-17T15:24:11.462475Z","iopub.execute_input":"2024-09-17T15:24:11.462997Z","iopub.status.idle":"2024-09-17T15:24:11.480002Z","shell.execute_reply.started":"2024-09-17T15:24:11.462938Z","shell.execute_reply":"2024-09-17T15:24:11.478029Z"},"trusted":true},"execution_count":70,"outputs":[{"execution_count":70,"output_type":"execute_result","data":{"text/plain":"Item_Type\nBaking Goods             1952.971207\nBreads                   2204.132226\nBreakfast                2111.808651\nCanned                   2225.194904\nDairy                    2232.542597\nFrozen Foods             2132.867744\nFruits and Vegetables    2289.009592\nHard Drinks              2139.221622\nHealth and Hygiene       2010.000265\nHousehold                2258.784300\nMeat                     2158.977911\nOthers                   1926.139702\nSeafood                  2326.065928\nSnack Foods              2277.321739\nSoft Drinks              2006.511735\nStarchy Foods            2374.332773\nName: Item_Outlet_Sales, dtype: float64"},"metadata":{}}]},{"cell_type":"markdown","source":"<a id='Datetime'></a>\n#### Feature Engineering with Datetime","metadata":{}},{"cell_type":"code","source":"import pandas as pd\n\ndf = pd.read_csv('/kaggle/input/air-quality-dataset/Air Quality.csv')\ndf = df[['Date', 'Time','NO2(GT)']]\ndf.head()","metadata":{"execution":{"iopub.status.busy":"2024-09-17T15:24:11.481908Z","iopub.execute_input":"2024-09-17T15:24:11.482305Z","iopub.status.idle":"2024-09-17T15:24:11.542248Z","shell.execute_reply.started":"2024-09-17T15:24:11.482262Z","shell.execute_reply":"2024-09-17T15:24:11.540999Z"},"trusted":true},"execution_count":71,"outputs":[{"execution_count":71,"output_type":"execute_result","data":{"text/plain":"         Date      Time  NO2(GT)\n0  10/03/2004  18:00:00    113.0\n1  10/03/2004  19:00:00     92.0\n2  10/03/2004  20:00:00    114.0\n3  10/03/2004  21:00:00    122.0\n4  10/03/2004  22:00:00    116.0","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Date</th>\n      <th>Time</th>\n      <th>NO2(GT)</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>10/03/2004</td>\n      <td>18:00:00</td>\n      <td>113.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>10/03/2004</td>\n      <td>19:00:00</td>\n      <td>92.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>10/03/2004</td>\n      <td>20:00:00</td>\n      <td>114.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>10/03/2004</td>\n      <td>21:00:00</td>\n      <td>122.0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>10/03/2004</td>\n      <td>22:00:00</td>\n      <td>116.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"df['Date_Time'] = pd.to_datetime(df['Date'] + ' ' + df['Time'], format='%d/%m/%Y %H:%M:%S')\ndf.dtypes","metadata":{"execution":{"iopub.status.busy":"2024-09-17T15:24:11.544104Z","iopub.execute_input":"2024-09-17T15:24:11.544637Z","iopub.status.idle":"2024-09-17T15:24:11.624425Z","shell.execute_reply.started":"2024-09-17T15:24:11.544579Z","shell.execute_reply":"2024-09-17T15:24:11.623096Z"},"trusted":true},"execution_count":72,"outputs":[{"execution_count":72,"output_type":"execute_result","data":{"text/plain":"Date                 object\nTime                 object\nNO2(GT)             float64\nDate_Time    datetime64[ns]\ndtype: object"},"metadata":{}}]},{"cell_type":"code","source":"# Extract hour and minute\ndf['Date_Time'].dt.hour.head()","metadata":{"execution":{"iopub.status.busy":"2024-09-17T15:24:11.625959Z","iopub.execute_input":"2024-09-17T15:24:11.626416Z","iopub.status.idle":"2024-09-17T15:24:11.643209Z","shell.execute_reply.started":"2024-09-17T15:24:11.626369Z","shell.execute_reply":"2024-09-17T15:24:11.641830Z"},"trusted":true},"execution_count":73,"outputs":[{"execution_count":73,"output_type":"execute_result","data":{"text/plain":"0    18.0\n1    19.0\n2    20.0\n3    21.0\n4    22.0\nName: Date_Time, dtype: float64"},"metadata":{}}]},{"cell_type":"code","source":"df['Date_Time'].dt.minute.head()","metadata":{"execution":{"iopub.status.busy":"2024-09-17T15:24:11.645144Z","iopub.execute_input":"2024-09-17T15:24:11.645663Z","iopub.status.idle":"2024-09-17T15:24:11.660243Z","shell.execute_reply.started":"2024-09-17T15:24:11.645602Z","shell.execute_reply":"2024-09-17T15:24:11.658499Z"},"trusted":true},"execution_count":74,"outputs":[{"execution_count":74,"output_type":"execute_result","data":{"text/plain":"0    0.0\n1    0.0\n2    0.0\n3    0.0\n4    0.0\nName: Date_Time, dtype: float64"},"metadata":{}}]},{"cell_type":"code","source":"# The day of week - Monday(0) to Sunday(6)\ndf['Date_Time'].dt.day_name().head()","metadata":{"execution":{"iopub.status.busy":"2024-09-17T15:24:11.662154Z","iopub.execute_input":"2024-09-17T15:24:11.662578Z","iopub.status.idle":"2024-09-17T15:24:11.676575Z","shell.execute_reply.started":"2024-09-17T15:24:11.662536Z","shell.execute_reply":"2024-09-17T15:24:11.675406Z"},"trusted":true},"execution_count":75,"outputs":[{"execution_count":75,"output_type":"execute_result","data":{"text/plain":"0    Wednesday\n1    Wednesday\n2    Wednesday\n3    Wednesday\n4    Wednesday\nName: Date_Time, dtype: object"},"metadata":{}}]},{"cell_type":"code","source":"# Extract month\ndf['Date_Time'].dt.month.head()","metadata":{"execution":{"iopub.status.busy":"2024-09-17T15:24:11.678780Z","iopub.execute_input":"2024-09-17T15:24:11.679185Z","iopub.status.idle":"2024-09-17T15:24:11.695385Z","shell.execute_reply.started":"2024-09-17T15:24:11.679143Z","shell.execute_reply":"2024-09-17T15:24:11.694160Z"},"trusted":true},"execution_count":76,"outputs":[{"execution_count":76,"output_type":"execute_result","data":{"text/plain":"0    3.0\n1    3.0\n2    3.0\n3    3.0\n4    3.0\nName: Date_Time, dtype: float64"},"metadata":{}}]},{"cell_type":"code","source":"df['Date_Time'].dt.is_month_end.head()","metadata":{"execution":{"iopub.status.busy":"2024-09-17T15:24:11.696827Z","iopub.execute_input":"2024-09-17T15:24:11.697221Z","iopub.status.idle":"2024-09-17T15:24:11.714379Z","shell.execute_reply.started":"2024-09-17T15:24:11.697181Z","shell.execute_reply":"2024-09-17T15:24:11.712823Z"},"trusted":true},"execution_count":77,"outputs":[{"execution_count":77,"output_type":"execute_result","data":{"text/plain":"0    False\n1    False\n2    False\n3    False\n4    False\nName: Date_Time, dtype: bool"},"metadata":{}}]},{"cell_type":"code","source":"# Concatenate all the datetime feature into a new dataframe\nnew_df = pd.DataFrame({\n    'year': df['Date_Time'].dt.year,\n    'month': df['Date_Time'].dt.month,\n    'day': df['Date_Time'].dt.day,\n    'hour': df['Date_Time'].dt.hour,\n    'dayofyear': df['Date_Time'].dt.dayofyear,\n    'week': df['Date_Time'].dt.isocalendar().week,  # Replaces the deprecated 'week'\n    'dayofweek': df['Date_Time'].dt.dayofweek,\n    'dayofweekname': df['Date_Time'].dt.day_name(),  # Replaces 'weekday_name'\n    'quarter': df['Date_Time'].dt.quarter\n})\n\nnew_df.head()","metadata":{"execution":{"iopub.status.busy":"2024-09-17T15:24:11.716222Z","iopub.execute_input":"2024-09-17T15:24:11.716748Z","iopub.status.idle":"2024-09-17T15:24:11.754669Z","shell.execute_reply.started":"2024-09-17T15:24:11.716671Z","shell.execute_reply":"2024-09-17T15:24:11.753358Z"},"trusted":true},"execution_count":78,"outputs":[{"execution_count":78,"output_type":"execute_result","data":{"text/plain":"     year  month   day  hour  dayofyear  week  dayofweek dayofweekname  \\\n0  2004.0    3.0  10.0  18.0       70.0    11        2.0     Wednesday   \n1  2004.0    3.0  10.0  19.0       70.0    11        2.0     Wednesday   \n2  2004.0    3.0  10.0  20.0       70.0    11        2.0     Wednesday   \n3  2004.0    3.0  10.0  21.0       70.0    11        2.0     Wednesday   \n4  2004.0    3.0  10.0  22.0       70.0    11        2.0     Wednesday   \n\n   quarter  \n0      1.0  \n1      1.0  \n2      1.0  \n3      1.0  \n4      1.0  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>year</th>\n      <th>month</th>\n      <th>day</th>\n      <th>hour</th>\n      <th>dayofyear</th>\n      <th>week</th>\n      <th>dayofweek</th>\n      <th>dayofweekname</th>\n      <th>quarter</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2004.0</td>\n      <td>3.0</td>\n      <td>10.0</td>\n      <td>18.0</td>\n      <td>70.0</td>\n      <td>11</td>\n      <td>2.0</td>\n      <td>Wednesday</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2004.0</td>\n      <td>3.0</td>\n      <td>10.0</td>\n      <td>19.0</td>\n      <td>70.0</td>\n      <td>11</td>\n      <td>2.0</td>\n      <td>Wednesday</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2004.0</td>\n      <td>3.0</td>\n      <td>10.0</td>\n      <td>20.0</td>\n      <td>70.0</td>\n      <td>11</td>\n      <td>2.0</td>\n      <td>Wednesday</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2004.0</td>\n      <td>3.0</td>\n      <td>10.0</td>\n      <td>21.0</td>\n      <td>70.0</td>\n      <td>11</td>\n      <td>2.0</td>\n      <td>Wednesday</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2004.0</td>\n      <td>3.0</td>\n      <td>10.0</td>\n      <td>22.0</td>\n      <td>70.0</td>\n      <td>11</td>\n      <td>2.0</td>\n      <td>Wednesday</td>\n      <td>1.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"complete_data = pd.concat([df,new_df],axis=1)\ncomplete_data.head()","metadata":{"execution":{"iopub.status.busy":"2024-09-17T15:24:11.756352Z","iopub.execute_input":"2024-09-17T15:24:11.756845Z","iopub.status.idle":"2024-09-17T15:24:11.784022Z","shell.execute_reply.started":"2024-09-17T15:24:11.756792Z","shell.execute_reply":"2024-09-17T15:24:11.782555Z"},"trusted":true},"execution_count":79,"outputs":[{"execution_count":79,"output_type":"execute_result","data":{"text/plain":"         Date      Time  NO2(GT)           Date_Time    year  month   day  \\\n0  10/03/2004  18:00:00    113.0 2004-03-10 18:00:00  2004.0    3.0  10.0   \n1  10/03/2004  19:00:00     92.0 2004-03-10 19:00:00  2004.0    3.0  10.0   \n2  10/03/2004  20:00:00    114.0 2004-03-10 20:00:00  2004.0    3.0  10.0   \n3  10/03/2004  21:00:00    122.0 2004-03-10 21:00:00  2004.0    3.0  10.0   \n4  10/03/2004  22:00:00    116.0 2004-03-10 22:00:00  2004.0    3.0  10.0   \n\n   hour  dayofyear  week  dayofweek dayofweekname  quarter  \n0  18.0       70.0    11        2.0     Wednesday      1.0  \n1  19.0       70.0    11        2.0     Wednesday      1.0  \n2  20.0       70.0    11        2.0     Wednesday      1.0  \n3  21.0       70.0    11        2.0     Wednesday      1.0  \n4  22.0       70.0    11        2.0     Wednesday      1.0  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Date</th>\n      <th>Time</th>\n      <th>NO2(GT)</th>\n      <th>Date_Time</th>\n      <th>year</th>\n      <th>month</th>\n      <th>day</th>\n      <th>hour</th>\n      <th>dayofyear</th>\n      <th>week</th>\n      <th>dayofweek</th>\n      <th>dayofweekname</th>\n      <th>quarter</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>10/03/2004</td>\n      <td>18:00:00</td>\n      <td>113.0</td>\n      <td>2004-03-10 18:00:00</td>\n      <td>2004.0</td>\n      <td>3.0</td>\n      <td>10.0</td>\n      <td>18.0</td>\n      <td>70.0</td>\n      <td>11</td>\n      <td>2.0</td>\n      <td>Wednesday</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>10/03/2004</td>\n      <td>19:00:00</td>\n      <td>92.0</td>\n      <td>2004-03-10 19:00:00</td>\n      <td>2004.0</td>\n      <td>3.0</td>\n      <td>10.0</td>\n      <td>19.0</td>\n      <td>70.0</td>\n      <td>11</td>\n      <td>2.0</td>\n      <td>Wednesday</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>10/03/2004</td>\n      <td>20:00:00</td>\n      <td>114.0</td>\n      <td>2004-03-10 20:00:00</td>\n      <td>2004.0</td>\n      <td>3.0</td>\n      <td>10.0</td>\n      <td>20.0</td>\n      <td>70.0</td>\n      <td>11</td>\n      <td>2.0</td>\n      <td>Wednesday</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>10/03/2004</td>\n      <td>21:00:00</td>\n      <td>122.0</td>\n      <td>2004-03-10 21:00:00</td>\n      <td>2004.0</td>\n      <td>3.0</td>\n      <td>10.0</td>\n      <td>21.0</td>\n      <td>70.0</td>\n      <td>11</td>\n      <td>2.0</td>\n      <td>Wednesday</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>10/03/2004</td>\n      <td>22:00:00</td>\n      <td>116.0</td>\n      <td>2004-03-10 22:00:00</td>\n      <td>2004.0</td>\n      <td>3.0</td>\n      <td>10.0</td>\n      <td>22.0</td>\n      <td>70.0</td>\n      <td>11</td>\n      <td>2.0</td>\n      <td>Wednesday</td>\n      <td>1.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"# is_weekday\ncomplete_data['is_weekday'] = 0\n\nfor i in range(0, len(complete_data)):\n    if complete_data['dayofweek'][i] < 5:\n        complete_data.loc[i, 'is_weekday'] = 1\n    else:\n        complete_data.loc[i, 'is_weekday'] = 0","metadata":{"execution":{"iopub.status.busy":"2024-09-17T15:24:11.785709Z","iopub.execute_input":"2024-09-17T15:24:11.786230Z","iopub.status.idle":"2024-09-17T15:24:14.560039Z","shell.execute_reply.started":"2024-09-17T15:24:11.786171Z","shell.execute_reply":"2024-09-17T15:24:14.558926Z"},"trusted":true},"execution_count":80,"outputs":[]},{"cell_type":"code","source":"complete_data[['dayofweek', 'is_weekday']].head()","metadata":{"execution":{"iopub.status.busy":"2024-09-17T15:24:14.567646Z","iopub.execute_input":"2024-09-17T15:24:14.568071Z","iopub.status.idle":"2024-09-17T15:24:14.581614Z","shell.execute_reply.started":"2024-09-17T15:24:14.568026Z","shell.execute_reply":"2024-09-17T15:24:14.580258Z"},"trusted":true},"execution_count":81,"outputs":[{"execution_count":81,"output_type":"execute_result","data":{"text/plain":"   dayofweek  is_weekday\n0        2.0           1\n1        2.0           1\n2        2.0           1\n3        2.0           1\n4        2.0           1","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>dayofweek</th>\n      <th>is_weekday</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2.0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2.0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2.0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2.0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2.0</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":"##### Difference between Dates","metadata":{}},{"cell_type":"code","source":"import pandas as pd\n\nagent = pd.read_csv('/kaggle/input/av-datascience/Test_wyCirpO_aS3XPkc.csv')\nagent.head()","metadata":{"execution":{"iopub.status.busy":"2024-09-17T15:24:14.583442Z","iopub.execute_input":"2024-09-17T15:24:14.583989Z","iopub.status.idle":"2024-09-17T15:24:14.693596Z","shell.execute_reply.started":"2024-09-17T15:24:14.583926Z","shell.execute_reply":"2024-09-17T15:24:14.692439Z"},"trusted":true},"execution_count":82,"outputs":[{"execution_count":82,"output_type":"execute_result","data":{"text/plain":"           ID  Office_PIN Application_Receipt_Date  Applicant_City_PIN  \\\n0  FIN1009528      284001                 7/2/2008            284001.0   \n1  FIN1009529      800001                 7/2/2008            800026.0   \n2  FIN1009530      800001                 7/2/2008                 NaN   \n3  FIN1009531      800001                 7/2/2008            844112.0   \n4  FIN1009532      533101                 7/2/2008            533102.0   \n\n  Applicant_Gender Applicant_BirthDate Applicant_Marital_Status  \\\n0                M            8/5/1982                        S   \n1                M           3/11/1968                        M   \n2                M          12/16/1984                        S   \n3                M            6/7/1971                        S   \n4                M           7/22/1978                        S   \n\n  Applicant_Occupation             Applicant_Qualification Manager_DOJ  ...  \\\n0             Salaried                            Graduate   5/26/2008  ...   \n1             Salaried                            Graduate   6/24/2008  ...   \n2                  NaN                            Graduate         NaN  ...   \n3             Salaried                            Graduate         NaN  ...   \n4                  NaN  Masters of Business Administration   12/4/2007  ...   \n\n  Manager_Grade Manager_Status  Manager_Gender Manager_DoB  \\\n0           2.0      Probation               F  10/14/1978   \n1           2.0      Probation               M    3/3/1971   \n2           NaN            NaN             NaN         NaN   \n3           NaN            NaN             NaN         NaN   \n4           3.0   Confirmation               M   6/23/1977   \n\n  Manager_Num_Application Manager_Num_Coded  Manager_Business  \\\n0                     1.0               0.0               0.0   \n1                     2.0               0.0               0.0   \n2                     NaN               NaN               NaN   \n3                     NaN               NaN               NaN   \n4                     4.0               1.0           97352.0   \n\n   Manager_Num_Products  Manager_Business2  Manager_Num_Products2  \n0                   0.0                0.0                    0.0  \n1                   0.0                0.0                    0.0  \n2                   NaN                NaN                    NaN  \n3                   NaN                NaN                    NaN  \n4                   3.0            97352.0                    3.0  \n\n[5 rows x 22 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>ID</th>\n      <th>Office_PIN</th>\n      <th>Application_Receipt_Date</th>\n      <th>Applicant_City_PIN</th>\n      <th>Applicant_Gender</th>\n      <th>Applicant_BirthDate</th>\n      <th>Applicant_Marital_Status</th>\n      <th>Applicant_Occupation</th>\n      <th>Applicant_Qualification</th>\n      <th>Manager_DOJ</th>\n      <th>...</th>\n      <th>Manager_Grade</th>\n      <th>Manager_Status</th>\n      <th>Manager_Gender</th>\n      <th>Manager_DoB</th>\n      <th>Manager_Num_Application</th>\n      <th>Manager_Num_Coded</th>\n      <th>Manager_Business</th>\n      <th>Manager_Num_Products</th>\n      <th>Manager_Business2</th>\n      <th>Manager_Num_Products2</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>FIN1009528</td>\n      <td>284001</td>\n      <td>7/2/2008</td>\n      <td>284001.0</td>\n      <td>M</td>\n      <td>8/5/1982</td>\n      <td>S</td>\n      <td>Salaried</td>\n      <td>Graduate</td>\n      <td>5/26/2008</td>\n      <td>...</td>\n      <td>2.0</td>\n      <td>Probation</td>\n      <td>F</td>\n      <td>10/14/1978</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>FIN1009529</td>\n      <td>800001</td>\n      <td>7/2/2008</td>\n      <td>800026.0</td>\n      <td>M</td>\n      <td>3/11/1968</td>\n      <td>M</td>\n      <td>Salaried</td>\n      <td>Graduate</td>\n      <td>6/24/2008</td>\n      <td>...</td>\n      <td>2.0</td>\n      <td>Probation</td>\n      <td>M</td>\n      <td>3/3/1971</td>\n      <td>2.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>FIN1009530</td>\n      <td>800001</td>\n      <td>7/2/2008</td>\n      <td>NaN</td>\n      <td>M</td>\n      <td>12/16/1984</td>\n      <td>S</td>\n      <td>NaN</td>\n      <td>Graduate</td>\n      <td>NaN</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>FIN1009531</td>\n      <td>800001</td>\n      <td>7/2/2008</td>\n      <td>844112.0</td>\n      <td>M</td>\n      <td>6/7/1971</td>\n      <td>S</td>\n      <td>Salaried</td>\n      <td>Graduate</td>\n      <td>NaN</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>FIN1009532</td>\n      <td>533101</td>\n      <td>7/2/2008</td>\n      <td>533102.0</td>\n      <td>M</td>\n      <td>7/22/1978</td>\n      <td>S</td>\n      <td>NaN</td>\n      <td>Masters of Business Administration</td>\n      <td>12/4/2007</td>\n      <td>...</td>\n      <td>3.0</td>\n      <td>Confirmation</td>\n      <td>M</td>\n      <td>6/23/1977</td>\n      <td>4.0</td>\n      <td>1.0</td>\n      <td>97352.0</td>\n      <td>3.0</td>\n      <td>97352.0</td>\n      <td>3.0</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 22 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"agent[['Application_Receipt_Date','Applicant_BirthDate']].head()","metadata":{"execution":{"iopub.status.busy":"2024-09-17T15:24:14.694993Z","iopub.execute_input":"2024-09-17T15:24:14.695385Z","iopub.status.idle":"2024-09-17T15:24:14.707988Z","shell.execute_reply.started":"2024-09-17T15:24:14.695326Z","shell.execute_reply":"2024-09-17T15:24:14.706708Z"},"trusted":true},"execution_count":83,"outputs":[{"execution_count":83,"output_type":"execute_result","data":{"text/plain":"  Application_Receipt_Date Applicant_BirthDate\n0                 7/2/2008            8/5/1982\n1                 7/2/2008           3/11/1968\n2                 7/2/2008          12/16/1984\n3                 7/2/2008            6/7/1971\n4                 7/2/2008           7/22/1978","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Application_Receipt_Date</th>\n      <th>Applicant_BirthDate</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>7/2/2008</td>\n      <td>8/5/1982</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>7/2/2008</td>\n      <td>3/11/1968</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>7/2/2008</td>\n      <td>12/16/1984</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>7/2/2008</td>\n      <td>6/7/1971</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>7/2/2008</td>\n      <td>7/22/1978</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"agent[['Application_Receipt_Date','Applicant_BirthDate']].dtypes\n","metadata":{"execution":{"iopub.status.busy":"2024-09-17T15:24:14.709416Z","iopub.execute_input":"2024-09-17T15:24:14.709823Z","iopub.status.idle":"2024-09-17T15:24:14.725005Z","shell.execute_reply.started":"2024-09-17T15:24:14.709779Z","shell.execute_reply":"2024-09-17T15:24:14.723767Z"},"trusted":true},"execution_count":84,"outputs":[{"execution_count":84,"output_type":"execute_result","data":{"text/plain":"Application_Receipt_Date    object\nApplicant_BirthDate         object\ndtype: object"},"metadata":{}}]},{"cell_type":"code","source":"# Since the format of the Application_Receipt_Date is mixed, we must use errors='coerce'\nagent['Application_Receipt_Date'] = pd.to_datetime(agent['Application_Receipt_Date'], format='%m/%d/%Y', errors='coerce')\n# Drop rows where Application_Receipt_Date is NaT\nagent.dropna(subset=['Application_Receipt_Date'], inplace=True)\n\nagent['Applicant_BirthDate'] = pd.to_datetime(agent['Applicant_BirthDate'], format='%m/%d/%Y')","metadata":{"execution":{"iopub.status.busy":"2024-09-17T15:24:14.726570Z","iopub.execute_input":"2024-09-17T15:24:14.727077Z","iopub.status.idle":"2024-09-17T15:24:14.767112Z","shell.execute_reply.started":"2024-09-17T15:24:14.727017Z","shell.execute_reply":"2024-09-17T15:24:14.765799Z"},"trusted":true},"execution_count":85,"outputs":[]},{"cell_type":"code","source":"(agent['Application_Receipt_Date'][0] - agent['Applicant_BirthDate'][0]).days","metadata":{"execution":{"iopub.status.busy":"2024-09-17T15:24:14.768766Z","iopub.execute_input":"2024-09-17T15:24:14.769188Z","iopub.status.idle":"2024-09-17T15:24:14.778945Z","shell.execute_reply.started":"2024-09-17T15:24:14.769143Z","shell.execute_reply":"2024-09-17T15:24:14.777583Z"},"trusted":true},"execution_count":86,"outputs":[{"execution_count":86,"output_type":"execute_result","data":{"text/plain":"9463"},"metadata":{}}]},{"cell_type":"code","source":"agent['Applicant_age'] = agent.apply(lambda x: (x['Application_Receipt_Date'] - x['Applicant_BirthDate']).days, axis=1)\nagent[['Application_Receipt_Date', 'Applicant_BirthDate', 'Applicant_age']].head()","metadata":{"execution":{"iopub.status.busy":"2024-09-17T15:24:14.781357Z","iopub.execute_input":"2024-09-17T15:24:14.781903Z","iopub.status.idle":"2024-09-17T15:24:14.940198Z","shell.execute_reply.started":"2024-09-17T15:24:14.781839Z","shell.execute_reply":"2024-09-17T15:24:14.938784Z"},"trusted":true},"execution_count":87,"outputs":[{"execution_count":87,"output_type":"execute_result","data":{"text/plain":"  Application_Receipt_Date Applicant_BirthDate  Applicant_age\n0               2008-07-02          1982-08-05         9463.0\n1               2008-07-02          1968-03-11        14723.0\n2               2008-07-02          1984-12-16         8599.0\n3               2008-07-02          1971-06-07        13540.0\n4               2008-07-02          1978-07-22        10938.0","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Application_Receipt_Date</th>\n      <th>Applicant_BirthDate</th>\n      <th>Applicant_age</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2008-07-02</td>\n      <td>1982-08-05</td>\n      <td>9463.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2008-07-02</td>\n      <td>1968-03-11</td>\n      <td>14723.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2008-07-02</td>\n      <td>1984-12-16</td>\n      <td>8599.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2008-07-02</td>\n      <td>1971-06-07</td>\n      <td>13540.0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2008-07-02</td>\n      <td>1978-07-22</td>\n      <td>10938.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"# Function to calculate age in years and months from days\ndef convert_days_to_years_months(days):\n    years = days // 365  # Integer division to get the number of years\n    months = (days % 365) // 30  # Remaining days converted to months\n    return f'{years} years, {months} months'\n\n# Apply the conversion to the 'Applicant_age' column\nagent['Applicant_age_years_months'] = agent['Applicant_age'].apply(lambda x: convert_days_to_years_months(x))\n\n# Display the result\nagent[['Application_Receipt_Date', 'Applicant_BirthDate', 'Applicant_age', 'Applicant_age_years_months']].head()\n","metadata":{"execution":{"iopub.status.busy":"2024-09-17T15:24:14.942382Z","iopub.execute_input":"2024-09-17T15:24:14.942923Z","iopub.status.idle":"2024-09-17T15:24:14.971718Z","shell.execute_reply.started":"2024-09-17T15:24:14.942862Z","shell.execute_reply":"2024-09-17T15:24:14.970371Z"},"trusted":true},"execution_count":88,"outputs":[{"execution_count":88,"output_type":"execute_result","data":{"text/plain":"  Application_Receipt_Date Applicant_BirthDate  Applicant_age  \\\n0               2008-07-02          1982-08-05         9463.0   \n1               2008-07-02          1968-03-11        14723.0   \n2               2008-07-02          1984-12-16         8599.0   \n3               2008-07-02          1971-06-07        13540.0   \n4               2008-07-02          1978-07-22        10938.0   \n\n  Applicant_age_years_months  \n0    25.0 years, 11.0 months  \n1     40.0 years, 4.0 months  \n2     23.0 years, 6.0 months  \n3     37.0 years, 1.0 months  \n4    29.0 years, 11.0 months  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Application_Receipt_Date</th>\n      <th>Applicant_BirthDate</th>\n      <th>Applicant_age</th>\n      <th>Applicant_age_years_months</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2008-07-02</td>\n      <td>1982-08-05</td>\n      <td>9463.0</td>\n      <td>25.0 years, 11.0 months</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2008-07-02</td>\n      <td>1968-03-11</td>\n      <td>14723.0</td>\n      <td>40.0 years, 4.0 months</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2008-07-02</td>\n      <td>1984-12-16</td>\n      <td>8599.0</td>\n      <td>23.0 years, 6.0 months</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2008-07-02</td>\n      <td>1971-06-07</td>\n      <td>13540.0</td>\n      <td>37.0 years, 1.0 months</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2008-07-02</td>\n      <td>1978-07-22</td>\n      <td>10938.0</td>\n      <td>29.0 years, 11.0 months</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":"<a id='AutomatedFeatureEngineering'></a>\n### Automated Feature Engineering","metadata":{}},{"cell_type":"markdown","source":"#### Entity","metadata":{}},{"cell_type":"code","source":"import pandas as pd\nimport featuretools as ft","metadata":{"execution":{"iopub.status.busy":"2024-09-17T15:24:14.973651Z","iopub.execute_input":"2024-09-17T15:24:14.974103Z","iopub.status.idle":"2024-09-17T15:24:14.988453Z","shell.execute_reply.started":"2024-09-17T15:24:14.974057Z","shell.execute_reply":"2024-09-17T15:24:14.986643Z"},"trusted":true},"execution_count":89,"outputs":[]},{"cell_type":"code","source":"df = pd.read_csv('/kaggle/input/big-mart-sales-dataset/Train.csv')\ndf.shape","metadata":{"execution":{"iopub.status.busy":"2024-09-17T15:24:14.990198Z","iopub.execute_input":"2024-09-17T15:24:14.990707Z","iopub.status.idle":"2024-09-17T15:24:15.035453Z","shell.execute_reply.started":"2024-09-17T15:24:14.990650Z","shell.execute_reply":"2024-09-17T15:24:15.034105Z"},"trusted":true},"execution_count":90,"outputs":[{"execution_count":90,"output_type":"execute_result","data":{"text/plain":"(8523, 12)"},"metadata":{}}]},{"cell_type":"code","source":"df.head()\nft.demo.load_retail()","metadata":{"execution":{"iopub.status.busy":"2024-09-17T16:00:31.774851Z","iopub.execute_input":"2024-09-17T16:00:31.775320Z","iopub.status.idle":"2024-09-17T16:00:46.626044Z","shell.execute_reply.started":"2024-09-17T16:00:31.775275Z","shell.execute_reply":"2024-09-17T16:00:46.624816Z"},"trusted":true},"execution_count":115,"outputs":[{"execution_count":115,"output_type":"execute_result","data":{"text/plain":"Entityset: demo_retail_data\n  DataFrames:\n    order_products [Rows: 401604, Columns: 8]\n    products [Rows: 3684, Columns: 4]\n    orders [Rows: 22190, Columns: 6]\n    customers [Rows: 4372, Columns: 3]\n  Relationships:\n    order_products.product_id -> products.product_id\n    order_products.order_id -> orders.order_id\n    orders.customer_name -> customers.customer_name"},"metadata":{}}]},{"cell_type":"code","source":"features = df.drop('Item_Outlet_Sales', axis=1)\ny = df['Item_Outlet_Sales']","metadata":{"execution":{"iopub.status.busy":"2024-09-17T15:24:15.037153Z","iopub.execute_input":"2024-09-17T15:24:15.037620Z","iopub.status.idle":"2024-09-17T15:24:15.046135Z","shell.execute_reply.started":"2024-09-17T15:24:15.037574Z","shell.execute_reply":"2024-09-17T15:24:15.044547Z"},"trusted":true},"execution_count":91,"outputs":[]},{"cell_type":"markdown","source":"##### Make an entity set and add the entity","metadata":{}},{"cell_type":"code","source":"es = ft.EntitySet(id='bigmart')\nes","metadata":{"execution":{"iopub.status.busy":"2024-09-17T15:24:15.047687Z","iopub.execute_input":"2024-09-17T15:24:15.048224Z","iopub.status.idle":"2024-09-17T15:24:15.060682Z","shell.execute_reply.started":"2024-09-17T15:24:15.048161Z","shell.execute_reply":"2024-09-17T15:24:15.059200Z"},"trusted":true},"execution_count":92,"outputs":[{"execution_count":92,"output_type":"execute_result","data":{"text/plain":"Entityset: bigmart\n  DataFrames:\n  Relationships:\n    No relationships"},"metadata":{}}]},{"cell_type":"markdown","source":"##### Add data to this entity set created","metadata":{}},{"cell_type":"code","source":"#es.entity_from_dataframe(entity_id='data_1', dataframe=features, make_index = True, index = 'index')\n# Updated method to add a dataframe to the entity set\n\nes = es.add_dataframe(\n    dataframe_name='data_1',\n    dataframe=features,\n    make_index=True,\n    index='index'\n)\n\nes","metadata":{"execution":{"iopub.status.busy":"2024-09-17T15:24:15.062658Z","iopub.execute_input":"2024-09-17T15:24:15.063205Z","iopub.status.idle":"2024-09-17T15:24:15.730763Z","shell.execute_reply.started":"2024-09-17T15:24:15.063146Z","shell.execute_reply":"2024-09-17T15:24:15.729653Z"},"trusted":true},"execution_count":93,"outputs":[{"execution_count":93,"output_type":"execute_result","data":{"text/plain":"Entityset: bigmart\n  DataFrames:\n    data_1 [Rows: 8523, Columns: 12]\n  Relationships:\n    No relationships"},"metadata":{}}]},{"cell_type":"markdown","source":"##### Feature Engineering","metadata":{}},{"cell_type":"code","source":"# Run deep feture synthesis with transformation primitives\nfeature_matrix, feature_defs = ft.dfs(\n    entityset=es,\n    target_dataframe_name='data_1',  # Updated from target_entity\n    max_depth=1,\n    trans_primitives=['add_numeric', 'multiply_numeric']\n)\n\n# Display the feature matrix\nfeature_matrix.head()","metadata":{"execution":{"iopub.status.busy":"2024-09-17T15:24:15.732060Z","iopub.execute_input":"2024-09-17T15:24:15.732419Z","iopub.status.idle":"2024-09-17T15:24:15.985760Z","shell.execute_reply.started":"2024-09-17T15:24:15.732378Z","shell.execute_reply":"2024-09-17T15:24:15.984455Z"},"trusted":true},"execution_count":94,"outputs":[{"execution_count":94,"output_type":"execute_result","data":{"text/plain":"      Item_Identifier  Item_Weight Item_Fat_Content  Item_Visibility  \\\nindex                                                                  \n0               FDA15         9.30          Low Fat         0.016047   \n1               DRC01         5.92          Regular         0.019278   \n2               FDN15        17.50          Low Fat         0.016760   \n3               FDX07        19.20          Regular         0.000000   \n4               NCD19         8.93          Low Fat         0.000000   \n\n                   Item_Type  Item_MRP Outlet_Identifier  \\\nindex                                                      \n0                      Dairy  249.8092            OUT049   \n1                Soft Drinks   48.2692            OUT018   \n2                       Meat  141.6180            OUT049   \n3      Fruits and Vegetables  182.0950            OUT010   \n4                  Household   53.8614            OUT013   \n\n       Outlet_Establishment_Year Outlet_Size Outlet_Location_Type  ...  \\\nindex                                                              ...   \n0                           1999      Medium               Tier 1  ...   \n1                           2009      Medium               Tier 3  ...   \n2                           1999      Medium               Tier 1  ...   \n3                           1998         NaN               Tier 3  ...   \n4                           1987        High               Tier 3  ...   \n\n      Item_MRP + Outlet_Establishment_Year  Item_Visibility + Item_Weight  \\\nindex                                                                       \n0                                2248.8092                       9.316047   \n1                                2057.2692                       5.939278   \n2                                2140.6180                      17.516760   \n3                                2180.0950                      19.200000   \n4                                2040.8614                       8.930000   \n\n       Item_Visibility + Outlet_Establishment_Year  \\\nindex                                                \n0                                      1999.016047   \n1                                      2009.019278   \n2                                      1999.016760   \n3                                      1998.000000   \n4                                      1987.000000   \n\n       Item_Weight + Outlet_Establishment_Year  Item_MRP * Item_Visibility  \\\nindex                                                                        \n0                                      2008.30                    4.008763   \n1                                      2014.92                    0.930544   \n2                                      2016.50                    2.373528   \n3                                      2017.20                    0.000000   \n4                                      1995.93                    0.000000   \n\n       Item_MRP * Item_Weight  Item_MRP * Outlet_Establishment_Year  \\\nindex                                                                 \n0                 2323.225560                           499368.5908   \n1                  285.753664                            96972.8228   \n2                 2478.315000                           283094.3820   \n3                 3496.224000                           363825.8100   \n4                  480.982302                           107022.6018   \n\n       Item_Visibility * Item_Weight  \\\nindex                                  \n0                           0.149240   \n1                           0.114127   \n2                           0.293301   \n3                           0.000000   \n4                           0.000000   \n\n       Item_Visibility * Outlet_Establishment_Year  \\\nindex                                                \n0                                        32.078555   \n1                                        38.729936   \n2                                        33.503390   \n3                                         0.000000   \n4                                         0.000000   \n\n       Item_Weight * Outlet_Establishment_Year  \nindex                                           \n0                                     18590.70  \n1                                     11893.28  \n2                                     34982.50  \n3                                     38361.60  \n4                                     17743.91  \n\n[5 rows x 23 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Item_Identifier</th>\n      <th>Item_Weight</th>\n      <th>Item_Fat_Content</th>\n      <th>Item_Visibility</th>\n      <th>Item_Type</th>\n      <th>Item_MRP</th>\n      <th>Outlet_Identifier</th>\n      <th>Outlet_Establishment_Year</th>\n      <th>Outlet_Size</th>\n      <th>Outlet_Location_Type</th>\n      <th>...</th>\n      <th>Item_MRP + Outlet_Establishment_Year</th>\n      <th>Item_Visibility + Item_Weight</th>\n      <th>Item_Visibility + Outlet_Establishment_Year</th>\n      <th>Item_Weight + Outlet_Establishment_Year</th>\n      <th>Item_MRP * Item_Visibility</th>\n      <th>Item_MRP * Item_Weight</th>\n      <th>Item_MRP * Outlet_Establishment_Year</th>\n      <th>Item_Visibility * Item_Weight</th>\n      <th>Item_Visibility * Outlet_Establishment_Year</th>\n      <th>Item_Weight * Outlet_Establishment_Year</th>\n    </tr>\n    <tr>\n      <th>index</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>FDA15</td>\n      <td>9.30</td>\n      <td>Low Fat</td>\n      <td>0.016047</td>\n      <td>Dairy</td>\n      <td>249.8092</td>\n      <td>OUT049</td>\n      <td>1999</td>\n      <td>Medium</td>\n      <td>Tier 1</td>\n      <td>...</td>\n      <td>2248.8092</td>\n      <td>9.316047</td>\n      <td>1999.016047</td>\n      <td>2008.30</td>\n      <td>4.008763</td>\n      <td>2323.225560</td>\n      <td>499368.5908</td>\n      <td>0.149240</td>\n      <td>32.078555</td>\n      <td>18590.70</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>DRC01</td>\n      <td>5.92</td>\n      <td>Regular</td>\n      <td>0.019278</td>\n      <td>Soft Drinks</td>\n      <td>48.2692</td>\n      <td>OUT018</td>\n      <td>2009</td>\n      <td>Medium</td>\n      <td>Tier 3</td>\n      <td>...</td>\n      <td>2057.2692</td>\n      <td>5.939278</td>\n      <td>2009.019278</td>\n      <td>2014.92</td>\n      <td>0.930544</td>\n      <td>285.753664</td>\n      <td>96972.8228</td>\n      <td>0.114127</td>\n      <td>38.729936</td>\n      <td>11893.28</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>FDN15</td>\n      <td>17.50</td>\n      <td>Low Fat</td>\n      <td>0.016760</td>\n      <td>Meat</td>\n      <td>141.6180</td>\n      <td>OUT049</td>\n      <td>1999</td>\n      <td>Medium</td>\n      <td>Tier 1</td>\n      <td>...</td>\n      <td>2140.6180</td>\n      <td>17.516760</td>\n      <td>1999.016760</td>\n      <td>2016.50</td>\n      <td>2.373528</td>\n      <td>2478.315000</td>\n      <td>283094.3820</td>\n      <td>0.293301</td>\n      <td>33.503390</td>\n      <td>34982.50</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>FDX07</td>\n      <td>19.20</td>\n      <td>Regular</td>\n      <td>0.000000</td>\n      <td>Fruits and Vegetables</td>\n      <td>182.0950</td>\n      <td>OUT010</td>\n      <td>1998</td>\n      <td>NaN</td>\n      <td>Tier 3</td>\n      <td>...</td>\n      <td>2180.0950</td>\n      <td>19.200000</td>\n      <td>1998.000000</td>\n      <td>2017.20</td>\n      <td>0.000000</td>\n      <td>3496.224000</td>\n      <td>363825.8100</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>38361.60</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>NCD19</td>\n      <td>8.93</td>\n      <td>Low Fat</td>\n      <td>0.000000</td>\n      <td>Household</td>\n      <td>53.8614</td>\n      <td>OUT013</td>\n      <td>1987</td>\n      <td>High</td>\n      <td>Tier 3</td>\n      <td>...</td>\n      <td>2040.8614</td>\n      <td>8.930000</td>\n      <td>1987.000000</td>\n      <td>1995.93</td>\n      <td>0.000000</td>\n      <td>480.982302</td>\n      <td>107022.6018</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>17743.91</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 23 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"feature_defs","metadata":{"execution":{"iopub.status.busy":"2024-09-17T15:24:15.987236Z","iopub.execute_input":"2024-09-17T15:24:15.987621Z","iopub.status.idle":"2024-09-17T15:24:15.996523Z","shell.execute_reply.started":"2024-09-17T15:24:15.987579Z","shell.execute_reply":"2024-09-17T15:24:15.995131Z"},"trusted":true},"execution_count":95,"outputs":[{"execution_count":95,"output_type":"execute_result","data":{"text/plain":"[<Feature: Item_Identifier>,\n <Feature: Item_Weight>,\n <Feature: Item_Fat_Content>,\n <Feature: Item_Visibility>,\n <Feature: Item_Type>,\n <Feature: Item_MRP>,\n <Feature: Outlet_Identifier>,\n <Feature: Outlet_Establishment_Year>,\n <Feature: Outlet_Size>,\n <Feature: Outlet_Location_Type>,\n <Feature: Outlet_Type>,\n <Feature: Item_MRP + Item_Visibility>,\n <Feature: Item_MRP + Item_Weight>,\n <Feature: Item_MRP + Outlet_Establishment_Year>,\n <Feature: Item_Visibility + Item_Weight>,\n <Feature: Item_Visibility + Outlet_Establishment_Year>,\n <Feature: Item_Weight + Outlet_Establishment_Year>,\n <Feature: Item_MRP * Item_Visibility>,\n <Feature: Item_MRP * Item_Weight>,\n <Feature: Item_MRP * Outlet_Establishment_Year>,\n <Feature: Item_Visibility * Item_Weight>,\n <Feature: Item_Visibility * Outlet_Establishment_Year>,\n <Feature: Item_Weight * Outlet_Establishment_Year>]"},"metadata":{}}]},{"cell_type":"code","source":"feature_matrix.shape","metadata":{"execution":{"iopub.status.busy":"2024-09-17T15:24:15.998342Z","iopub.execute_input":"2024-09-17T15:24:15.998925Z","iopub.status.idle":"2024-09-17T15:24:16.008786Z","shell.execute_reply.started":"2024-09-17T15:24:15.998836Z","shell.execute_reply":"2024-09-17T15:24:16.007212Z"},"trusted":true},"execution_count":96,"outputs":[{"execution_count":96,"output_type":"execute_result","data":{"text/plain":"(8523, 23)"},"metadata":{}}]},{"cell_type":"code","source":"# Run deep feature synthesis with transformation primitives\nfeature_matrix, feature_defs = ft.dfs(\n    entityset=es,\n    target_dataframe_name='data_1',\n    max_depth=3,\n    trans_primitives=['add_numeric', 'multiply_numeric', 'subtract_numeric', 'divide_numeric']  # Remove invalid primitive\n)\n\n# Display the feature matrix\nfeature_matrix.head()\n\n","metadata":{"execution":{"iopub.status.busy":"2024-09-17T15:56:32.741922Z","iopub.execute_input":"2024-09-17T15:56:32.742439Z","iopub.status.idle":"2024-09-17T15:56:33.021661Z","shell.execute_reply.started":"2024-09-17T15:56:32.742393Z","shell.execute_reply":"2024-09-17T15:56:33.020500Z"},"trusted":true},"execution_count":114,"outputs":[{"execution_count":114,"output_type":"execute_result","data":{"text/plain":"      Item_Identifier  Item_Weight Item_Fat_Content  Item_Visibility  \\\nindex                                                                  \n0               FDA15         9.30          Low Fat         0.016047   \n1               DRC01         5.92          Regular         0.019278   \n2               FDN15        17.50          Low Fat         0.016760   \n3               FDX07        19.20          Regular         0.000000   \n4               NCD19         8.93          Low Fat         0.000000   \n\n                   Item_Type  Item_MRP Outlet_Identifier  \\\nindex                                                      \n0                      Dairy  249.8092            OUT049   \n1                Soft Drinks   48.2692            OUT018   \n2                       Meat  141.6180            OUT049   \n3      Fruits and Vegetables  182.0950            OUT010   \n4                  Household   53.8614            OUT013   \n\n       Outlet_Establishment_Year Outlet_Size Outlet_Location_Type  ...  \\\nindex                                                              ...   \n0                           1999      Medium               Tier 1  ...   \n1                           2009      Medium               Tier 3  ...   \n2                           1999      Medium               Tier 1  ...   \n3                           1998         NaN               Tier 3  ...   \n4                           1987        High               Tier 3  ...   \n\n      Item_MRP * Outlet_Establishment_Year  Item_Visibility * Item_Weight  \\\nindex                                                                       \n0                              499368.5908                       0.149240   \n1                               96972.8228                       0.114127   \n2                              283094.3820                       0.293301   \n3                              363825.8100                       0.000000   \n4                              107022.6018                       0.000000   \n\n       Item_Visibility * Outlet_Establishment_Year  \\\nindex                                                \n0                                        32.078555   \n1                                        38.729936   \n2                                        33.503390   \n3                                         0.000000   \n4                                         0.000000   \n\n       Item_Weight * Outlet_Establishment_Year  Item_MRP - Item_Visibility  \\\nindex                                                                        \n0                                     18590.70                  249.793153   \n1                                     11893.28                   48.249922   \n2                                     34982.50                  141.601240   \n3                                     38361.60                  182.095000   \n4                                     17743.91                   53.861400   \n\n       Item_MRP - Item_Weight  Item_MRP - Outlet_Establishment_Year  \\\nindex                                                                 \n0                    240.5092                            -1749.1908   \n1                     42.3492                            -1960.7308   \n2                    124.1180                            -1857.3820   \n3                    162.8950                            -1815.9050   \n4                     44.9314                            -1933.1386   \n\n       Item_Visibility - Item_Weight  \\\nindex                                  \n0                          -9.283953   \n1                          -5.900722   \n2                         -17.483240   \n3                         -19.200000   \n4                          -8.930000   \n\n       Item_Visibility - Outlet_Establishment_Year  \\\nindex                                                \n0                                     -1998.983953   \n1                                     -2008.980722   \n2                                     -1998.983240   \n3                                     -1998.000000   \n4                                     -1987.000000   \n\n       Item_Weight - Outlet_Establishment_Year  \nindex                                           \n0                                     -1989.70  \n1                                     -2003.08  \n2                                     -1981.50  \n3                                     -1978.80  \n4                                     -1978.07  \n\n[5 rows x 41 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Item_Identifier</th>\n      <th>Item_Weight</th>\n      <th>Item_Fat_Content</th>\n      <th>Item_Visibility</th>\n      <th>Item_Type</th>\n      <th>Item_MRP</th>\n      <th>Outlet_Identifier</th>\n      <th>Outlet_Establishment_Year</th>\n      <th>Outlet_Size</th>\n      <th>Outlet_Location_Type</th>\n      <th>...</th>\n      <th>Item_MRP * Outlet_Establishment_Year</th>\n      <th>Item_Visibility * Item_Weight</th>\n      <th>Item_Visibility * Outlet_Establishment_Year</th>\n      <th>Item_Weight * Outlet_Establishment_Year</th>\n      <th>Item_MRP - Item_Visibility</th>\n      <th>Item_MRP - Item_Weight</th>\n      <th>Item_MRP - Outlet_Establishment_Year</th>\n      <th>Item_Visibility - Item_Weight</th>\n      <th>Item_Visibility - Outlet_Establishment_Year</th>\n      <th>Item_Weight - Outlet_Establishment_Year</th>\n    </tr>\n    <tr>\n      <th>index</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>FDA15</td>\n      <td>9.30</td>\n      <td>Low Fat</td>\n      <td>0.016047</td>\n      <td>Dairy</td>\n      <td>249.8092</td>\n      <td>OUT049</td>\n      <td>1999</td>\n      <td>Medium</td>\n      <td>Tier 1</td>\n      <td>...</td>\n      <td>499368.5908</td>\n      <td>0.149240</td>\n      <td>32.078555</td>\n      <td>18590.70</td>\n      <td>249.793153</td>\n      <td>240.5092</td>\n      <td>-1749.1908</td>\n      <td>-9.283953</td>\n      <td>-1998.983953</td>\n      <td>-1989.70</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>DRC01</td>\n      <td>5.92</td>\n      <td>Regular</td>\n      <td>0.019278</td>\n      <td>Soft Drinks</td>\n      <td>48.2692</td>\n      <td>OUT018</td>\n      <td>2009</td>\n      <td>Medium</td>\n      <td>Tier 3</td>\n      <td>...</td>\n      <td>96972.8228</td>\n      <td>0.114127</td>\n      <td>38.729936</td>\n      <td>11893.28</td>\n      <td>48.249922</td>\n      <td>42.3492</td>\n      <td>-1960.7308</td>\n      <td>-5.900722</td>\n      <td>-2008.980722</td>\n      <td>-2003.08</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>FDN15</td>\n      <td>17.50</td>\n      <td>Low Fat</td>\n      <td>0.016760</td>\n      <td>Meat</td>\n      <td>141.6180</td>\n      <td>OUT049</td>\n      <td>1999</td>\n      <td>Medium</td>\n      <td>Tier 1</td>\n      <td>...</td>\n      <td>283094.3820</td>\n      <td>0.293301</td>\n      <td>33.503390</td>\n      <td>34982.50</td>\n      <td>141.601240</td>\n      <td>124.1180</td>\n      <td>-1857.3820</td>\n      <td>-17.483240</td>\n      <td>-1998.983240</td>\n      <td>-1981.50</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>FDX07</td>\n      <td>19.20</td>\n      <td>Regular</td>\n      <td>0.000000</td>\n      <td>Fruits and Vegetables</td>\n      <td>182.0950</td>\n      <td>OUT010</td>\n      <td>1998</td>\n      <td>NaN</td>\n      <td>Tier 3</td>\n      <td>...</td>\n      <td>363825.8100</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>38361.60</td>\n      <td>182.095000</td>\n      <td>162.8950</td>\n      <td>-1815.9050</td>\n      <td>-19.200000</td>\n      <td>-1998.000000</td>\n      <td>-1978.80</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>NCD19</td>\n      <td>8.93</td>\n      <td>Low Fat</td>\n      <td>0.000000</td>\n      <td>Household</td>\n      <td>53.8614</td>\n      <td>OUT013</td>\n      <td>1987</td>\n      <td>High</td>\n      <td>Tier 3</td>\n      <td>...</td>\n      <td>107022.6018</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>17743.91</td>\n      <td>53.861400</td>\n      <td>44.9314</td>\n      <td>-1933.1386</td>\n      <td>-8.930000</td>\n      <td>-1987.000000</td>\n      <td>-1978.07</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 41 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"feature_matrix, feature_defs = ft.dfs(\n    entityset=es,\n    target_dataframe_name='data_1',\n    max_depth=2,\n    trans_primitives=['add_numeric', 'multiply_numeric', 'subtract_numeric', 'divide_numeric', 'cum_sum', 'percentile']\n)\n\n# Create a custom ratio feature\nagent['Item_MRP_to_Weight'] = agent['Item_MRP'] / agent['Item_Weight']\nagent['Weight_to_Year'] = agent['Item_Weight'] / agent['Outlet_Establishment_Year']\n\nfeature_matrix, feature_defs = ft.dfs(\n    entityset=es,\n    target_dataframe_name='data_1',\n    max_depth=3,  # Try increasing the depth\n    trans_primitives=['add_numeric', 'multiply_numeric', 'subtract_numeric', 'divide_numeric']\n)\n\n# Display the feature matrix\nprint(feature_matrix.shape)  # Check if the number of columns increases\nfeature_matrix.head()\n","metadata":{"execution":{"iopub.status.busy":"2024-09-17T15:43:54.329877Z","iopub.execute_input":"2024-09-17T15:43:54.330363Z","iopub.status.idle":"2024-09-17T15:43:54.624103Z","shell.execute_reply.started":"2024-09-17T15:43:54.330317Z","shell.execute_reply":"2024-09-17T15:43:54.622966Z"},"trusted":true},"execution_count":107,"outputs":[{"name":"stdout","text":"(8523, 49)\n","output_type":"stream"},{"execution_count":107,"output_type":"execute_result","data":{"text/plain":"      Item_Identifier  Item_Weight Item_Fat_Content  Item_Visibility  \\\nindex                                                                  \n0               FDA15         9.30          Low Fat         0.016047   \n1               DRC01         5.92          Regular         0.019278   \n2               FDN15        17.50          Low Fat         0.016760   \n3               FDX07        19.20          Regular         0.000000   \n4               NCD19         8.93          Low Fat         0.000000   \n\n                   Item_Type  Item_MRP Outlet_Identifier  \\\nindex                                                      \n0                      Dairy  249.8092            OUT049   \n1                Soft Drinks   48.2692            OUT018   \n2                       Meat  141.6180            OUT049   \n3      Fruits and Vegetables  182.0950            OUT010   \n4                  Household   53.8614            OUT013   \n\n       Outlet_Establishment_Year Outlet_Size Outlet_Location_Type  ...  \\\nindex                                                              ...   \n0                           1999      Medium               Tier 1  ...   \n1                           2009      Medium               Tier 3  ...   \n2                           1999      Medium               Tier 1  ...   \n3                           1998         NaN               Tier 3  ...   \n4                           1987        High               Tier 3  ...   \n\n      PERCENTILE(Item_MRP)  PERCENTILE(Item_Visibility)  \\\nindex                                                     \n0                 0.947788                     0.140092   \n1                 0.080371                     0.165435   \n2                 0.491904                     0.146075   \n3                 0.727561                     0.030916   \n4                 0.104775                     0.030916   \n\n       PERCENTILE(Item_Weight)  PERCENTILE(Outlet_Establishment_Year)  \\\nindex                                                                   \n0                     0.296955                               0.509856   \n1                     0.047025                               0.945618   \n2                     0.780453                               0.509856   \n3                     0.886402                               0.422738   \n4                     0.263952                               0.226387   \n\n       Item_MRP - Item_Visibility  Item_MRP - Item_Weight  \\\nindex                                                       \n0                      249.793153                240.5092   \n1                       48.249922                 42.3492   \n2                      141.601240                124.1180   \n3                      182.095000                162.8950   \n4                       53.861400                 44.9314   \n\n       Item_MRP - Outlet_Establishment_Year  Item_Visibility - Item_Weight  \\\nindex                                                                        \n0                                -1749.1908                      -9.283953   \n1                                -1960.7308                      -5.900722   \n2                                -1857.3820                     -17.483240   \n3                                -1815.9050                     -19.200000   \n4                                -1933.1386                      -8.930000   \n\n       Item_Visibility - Outlet_Establishment_Year  \\\nindex                                                \n0                                     -1998.983953   \n1                                     -2008.980722   \n2                                     -1998.983240   \n3                                     -1998.000000   \n4                                     -1987.000000   \n\n       Item_Weight - Outlet_Establishment_Year  \nindex                                           \n0                                     -1989.70  \n1                                     -2003.08  \n2                                     -1981.50  \n3                                     -1978.80  \n4                                     -1978.07  \n\n[5 rows x 49 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Item_Identifier</th>\n      <th>Item_Weight</th>\n      <th>Item_Fat_Content</th>\n      <th>Item_Visibility</th>\n      <th>Item_Type</th>\n      <th>Item_MRP</th>\n      <th>Outlet_Identifier</th>\n      <th>Outlet_Establishment_Year</th>\n      <th>Outlet_Size</th>\n      <th>Outlet_Location_Type</th>\n      <th>...</th>\n      <th>PERCENTILE(Item_MRP)</th>\n      <th>PERCENTILE(Item_Visibility)</th>\n      <th>PERCENTILE(Item_Weight)</th>\n      <th>PERCENTILE(Outlet_Establishment_Year)</th>\n      <th>Item_MRP - Item_Visibility</th>\n      <th>Item_MRP - Item_Weight</th>\n      <th>Item_MRP - Outlet_Establishment_Year</th>\n      <th>Item_Visibility - Item_Weight</th>\n      <th>Item_Visibility - Outlet_Establishment_Year</th>\n      <th>Item_Weight - Outlet_Establishment_Year</th>\n    </tr>\n    <tr>\n      <th>index</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>FDA15</td>\n      <td>9.30</td>\n      <td>Low Fat</td>\n      <td>0.016047</td>\n      <td>Dairy</td>\n      <td>249.8092</td>\n      <td>OUT049</td>\n      <td>1999</td>\n      <td>Medium</td>\n      <td>Tier 1</td>\n      <td>...</td>\n      <td>0.947788</td>\n      <td>0.140092</td>\n      <td>0.296955</td>\n      <td>0.509856</td>\n      <td>249.793153</td>\n      <td>240.5092</td>\n      <td>-1749.1908</td>\n      <td>-9.283953</td>\n      <td>-1998.983953</td>\n      <td>-1989.70</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>DRC01</td>\n      <td>5.92</td>\n      <td>Regular</td>\n      <td>0.019278</td>\n      <td>Soft Drinks</td>\n      <td>48.2692</td>\n      <td>OUT018</td>\n      <td>2009</td>\n      <td>Medium</td>\n      <td>Tier 3</td>\n      <td>...</td>\n      <td>0.080371</td>\n      <td>0.165435</td>\n      <td>0.047025</td>\n      <td>0.945618</td>\n      <td>48.249922</td>\n      <td>42.3492</td>\n      <td>-1960.7308</td>\n      <td>-5.900722</td>\n      <td>-2008.980722</td>\n      <td>-2003.08</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>FDN15</td>\n      <td>17.50</td>\n      <td>Low Fat</td>\n      <td>0.016760</td>\n      <td>Meat</td>\n      <td>141.6180</td>\n      <td>OUT049</td>\n      <td>1999</td>\n      <td>Medium</td>\n      <td>Tier 1</td>\n      <td>...</td>\n      <td>0.491904</td>\n      <td>0.146075</td>\n      <td>0.780453</td>\n      <td>0.509856</td>\n      <td>141.601240</td>\n      <td>124.1180</td>\n      <td>-1857.3820</td>\n      <td>-17.483240</td>\n      <td>-1998.983240</td>\n      <td>-1981.50</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>FDX07</td>\n      <td>19.20</td>\n      <td>Regular</td>\n      <td>0.000000</td>\n      <td>Fruits and Vegetables</td>\n      <td>182.0950</td>\n      <td>OUT010</td>\n      <td>1998</td>\n      <td>NaN</td>\n      <td>Tier 3</td>\n      <td>...</td>\n      <td>0.727561</td>\n      <td>0.030916</td>\n      <td>0.886402</td>\n      <td>0.422738</td>\n      <td>182.095000</td>\n      <td>162.8950</td>\n      <td>-1815.9050</td>\n      <td>-19.200000</td>\n      <td>-1998.000000</td>\n      <td>-1978.80</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>NCD19</td>\n      <td>8.93</td>\n      <td>Low Fat</td>\n      <td>0.000000</td>\n      <td>Household</td>\n      <td>53.8614</td>\n      <td>OUT013</td>\n      <td>1987</td>\n      <td>High</td>\n      <td>Tier 3</td>\n      <td>...</td>\n      <td>0.104775</td>\n      <td>0.030916</td>\n      <td>0.263952</td>\n      <td>0.226387</td>\n      <td>53.861400</td>\n      <td>44.9314</td>\n      <td>-1933.1386</td>\n      <td>-8.930000</td>\n      <td>-1987.000000</td>\n      <td>-1978.07</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 49 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"feature_defs","metadata":{"execution":{"iopub.status.busy":"2024-09-17T15:48:15.819862Z","iopub.execute_input":"2024-09-17T15:48:15.820353Z","iopub.status.idle":"2024-09-17T15:48:15.828953Z","shell.execute_reply.started":"2024-09-17T15:48:15.820306Z","shell.execute_reply":"2024-09-17T15:48:15.827643Z"},"trusted":true},"execution_count":110,"outputs":[{"execution_count":110,"output_type":"execute_result","data":{"text/plain":"[<Feature: Item_Identifier>,\n <Feature: Item_Weight>,\n <Feature: Item_Fat_Content>,\n <Feature: Item_Visibility>,\n <Feature: Item_Type>,\n <Feature: Item_MRP>,\n <Feature: Outlet_Identifier>,\n <Feature: Outlet_Establishment_Year>,\n <Feature: Outlet_Size>,\n <Feature: Outlet_Location_Type>,\n <Feature: Outlet_Type>,\n <Feature: Item_MRP + Item_Visibility>,\n <Feature: Item_MRP + Item_Weight>,\n <Feature: Item_MRP + Outlet_Establishment_Year>,\n <Feature: Item_Visibility + Item_Weight>,\n <Feature: Item_Visibility + Outlet_Establishment_Year>,\n <Feature: Item_Weight + Outlet_Establishment_Year>,\n <Feature: Item_MRP * Item_Visibility>,\n <Feature: Item_MRP * Item_Weight>,\n <Feature: Item_MRP * Outlet_Establishment_Year>,\n <Feature: Item_Visibility * Item_Weight>,\n <Feature: Item_Visibility * Outlet_Establishment_Year>,\n <Feature: Item_Weight * Outlet_Establishment_Year>]"},"metadata":{}}]},{"cell_type":"code","source":"feature_matrix.shape","metadata":{"execution":{"iopub.status.busy":"2024-09-17T15:24:16.288682Z","iopub.execute_input":"2024-09-17T15:24:16.289203Z","iopub.status.idle":"2024-09-17T15:24:16.299347Z","shell.execute_reply.started":"2024-09-17T15:24:16.289144Z","shell.execute_reply":"2024-09-17T15:24:16.298156Z"},"trusted":true},"execution_count":99,"outputs":[{"execution_count":99,"output_type":"execute_result","data":{"text/plain":"(8523, 23)"},"metadata":{}}]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}