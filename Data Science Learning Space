{
 "cells": [
  {
   "attachments": {
    "233dcdea-831f-4a3e-b239-763898a14efe.PNG": {
     "image/png": "iVBORw0KGgoAAAANSUhEUgAAAMsAAABfCAYAAABGDDNmAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAAEnQAABJ0Ad5mH3gAABNwSURBVHhe7d0FlJTV+wdwRf3ZgSLYgKgIBnZieyzs7sDE7kKxRfSo2N0tKrZiYXd3d2F36/2fz/1zcVhnh9llWGZm7/ece5bdeWeY9773e59+7jghIyOjLGSyZGSUiUyWjIwykcmSkVEmMlkyMspEJktGzeGPP/4IH3/8cXjiiSfCQw89VPZ4+umnw/vvvx9+/vnn4Z/UNGSyZNQcvvvuu3D11VeHNdZYI/Ts2TMstdRSJYdrjA033DCcc8454d133x3+SU1DJktGzeGbb74Jl19+eejVq1dYcsklwxJLLFFyLL744vHnWmutFU477bTwzjvvDP+kkfHPP//8ZxQikyWj5vDbb79Fdeqxxx4L999/fxg6dGjJcd9998XxyCOPhDfeeCP8+OOPwz9pZGSyZGSUiUyWGoaH9ffff4e//vorGrW///57/On39CDTQ/3zzz/ja356T2uA+3TPaTS8d/NirtLc+HcppLlMoyEyWaoYHhiCfPnll+HVV18NTz31VFQjvv3227gA0jU//fRTeO+998Lzzz8f3nrrrfD999/XPWHSfbM/nn322Xjvn3zySfj111+HX/H/XrMvvvgizt0LL7wQPvroo6jCNYZiBClEJkuVwoP74YcforvzoosuCocddljYbbfdwhFHHBEGDx4cXn/99egCHTZsWLj33nvDySefHPbbb7/Qv3//cPPNN0ePD6LVI9wXm+XWW28Nxx9/fNhjjz3CXnvtFU4//fToIjYnv/zySyTJpZdeGufswAMPDGeccUZ44IEHIoGag0yWKgSp4YHecsstYeuttw6rrrpq2GKLLcKmm24aVlpppbDccsuFPffcM9x4442RSL179w4bbbRRfH355ZcPyyyzTDj88MPDm2++OcrdspbgXpCAFEGAlVdeOay77rrxvnm6uIfXXnvt6PEyd3379g2rr7562HLLLePfecW4j2+66aYodZqKTJYqA/WJ2nXdddfFRbDKKquEY489Ntx1113Rs0NydOvWLUw55ZTx4Xt9m222Ceeee24466yzwoorrhjGH3/8MO+884brr7++rqSLe3nppZfC0UcfHTeNzTffPFx22WXhwQcfDIMGDQqbbbZZmGGGGULXrl3jpmGTIW1ds/fee4eOHTvG1w855JDw6aefNllVzWSpMtC5qRKkxZprrhmDb8hD2hjPPPNMWG+99cI444wTJppoorDssstGtYstQxVDkvHGGy906dIlEqi50epqxGeffRZOOeWUOC8ky4svvhglDXz11VfhggsuCPPPP3+cmxlnnDGqXlQx84lY7du3D9NMM03YcccdwyuvvDLC7isXmSxVBGrGhx9+GO0TUsPitwgS7IQvv/xyVCUsiOmmmy4uCKkfDHvqBqL873//i+8nWdJiqnVQm8RURO2pXpwdhZJBoJJ9ssACC0TJ6v5vuOGGGO23mcwzzzxxzmaaaaY4vyTLqLxjDZHJUiVAFA+PZ4c6Qcdm3BeCJ4eBSvUad9xxQ/fu3eMCIT14go477riot5M2Rx11VJQ2TV0QvoeF6TMRrdLDPTR1RweLnn0maj9w4MD4O/i+hsV/wgknhFlnnTW0a9cubL/99uG5556L/59gJJWW1Nlkk03CHXfckW2WWoeFTULIX7rmmmuiVLEQEriMkcNDn3DCCaNezhNm8VkUPGSMV4a/f1ucTQW7gGPAbnzttddG26kSg03hJ5WoOd4o5BgyZEhULalfaRNIZDFvO+20U5h00knDHHPMEU499dSotnmNGiuCT6W12fCWFc5ruchkqSJ4gGwWD9fiQILCh2r35OWyc9K9LQ66d1JH7JZiLIZF771NXRTc1Yiy/vrrx7yrpZdeerQH71ySeIceemh47bXXhv9v5cO9UbUQrTCWku6RLcegp2rNN998I6mg5sd7pLmQmE017BMyWWoIdnyGqgXRqVOnqI6U2qWbShSwmHiXDjrooLDtttuGHXbYoSJju+22i+QmNQVQKwULHykQfK655gpt2rSJxCRBmnP/pZDJUmVIO2XDB21RMGqpXshC1eASTRHpYgujOYuFekPd++CDD+KiFvyr1PB5pGNz1MPGQOL4rieddFJ0C0822WTRLiFxwRyYuzSnzZmThLFOltH58vUI82HBUhsKjVALjC0ixmL3pGr4PalqaXgPVYrK0Vx1o9qeSfo+frpfKmayWcyTTYTUQhQuY6oquwS8xzy4XnqMjaBQjWsKxipZ3IQv7iY85Gp7SC0N928hcB8//vjjMQBn0fv7559/Hr09YgUWBW/Zo48+OoIQaSHJlWKYM/zNa73AfbLFOC54DHn/rBlq4+233x5WWGGFERKXE6CQEObGBmK+OBrEXpqDsUYWD5ZItjuKJ/CSNFZn0BqQiIIgIvYbbLBBzHlCGnPlAUt9mXjiiWN8hU1B/SiEBcHjs9pqq8WcKb/XA8wNp4e4yS677BLdwryCvF2M/gsvvDDaK8gy99xzx80iwXsN9l6/fv2iHcYz1hyMFbL48rw9bp4xNtVUU8UJEBdojUgPlLFu45CW4cHPPvvs0S6xidx9990jotNe5xq1qyZQM+jpki2V0l5xxRUjVJVah81Cvb3MBS5znkBOAy5kJDj44INDhw4d4txQT7nPwZySSCQst7UYjYRL72kOxgpZ3IB0aUyfZJJJ4m5pN3TzrRGJLFQoqRgCjuZF/tNtt90WYwgCjvLBLIjOnTtHr1Iig/kUxZcKwlW77777xvfUC0hcMZZFFlkkzg1PoPww0lYGNqfHBBNMEOdmwQUXjGoZmBfSVeRf/hyyUMMKN5mmYKyQxU5B3SASGatt27aN4tUDb61AFmqVhD+75/TTTx/22WefSBap5bJnpWxI1xBnMV9iC0jBwHWNOIOUl4cffngk50Ctw71QnUhMZFl44YVj0NbfSFL5cCTK1FNPHW0WWcdvv/12jOcgE/VVrIc0ZusgUXMwVsiC2XfeeeeIDFn6piQ4BlxrBbLYBenbVNMePXrE2IRUfImDUvDPO++8cMABB8SFgThcpNQKBEEUu6fM5OROrhdY3Ba+zYM3ULBUNrENY5111on228UXXxxjUObGXOy6665xSN2ntQwYMCDW+Jjn5mKskOXrr7+OaoRU6sknnzxsvPHGcXesp92wqfAQqVWkyyWXXBIXg12TS5S6SsIwaCVSmjvEoKbxisl7OvLII+vaSWIjITHFU3bfffdo4/bp0yecffbZ0VbjKrZRyImznhBGwqlrr7zyyhjnGd311aJksSAMolBhDrFJ3eD9aU6+UD0h7XhUVA9eGawotAViR2Skeo3U4EamxlJDuIglXKaS2tHZOasZpAuNxKLX1eWee+6JG6y5YNN43UZhrp588sn4us2Dq5nHrBLOjhYni5vijbAbMuyJVOWhrVmqFIO5Qo7GHnKaS6NevF7lIM2L9eLei8E15iSNSqHF1TC7AMYjybTTThvrMRhjGRnVjhYnC91TN0F1B1yggmj1FGnOqF+0OFno4wxW7k8Gqgh1Y+I0I6Oa0OJk4e3h4pMhyrOREt4yMqodZZOF0VRsFKLh7wnpWhJEGxtNmsVW2C7ZsM+oFTRJsljwDHTuy+SuS0RI4KmQTs6NmTwR6RrEkHqw2GKLxTpz2bWF783IqGaUTRbkkI7C9y+/RtmmXC4GeyINP7h8Hbk5mgIIFvF9J9Igi6Ca1AwRfNePKbJkEmZUGqMki4UuqCMAJkostUInQMlrMj9FkwXQSAmlnTJA5eKkVAwdOWQTI5SBIApwSB8LOo0xgcLPr9TIaL0oSRaLW4cRJJCbJJdr5513jrk4smMXWmihmEaONMccc0xMvVCHoeOfoONss80W08p1SizM+7LoClW4Si1Cn0N6ISSCS6up9EB00jKpoRmtB42SxcIT/5BOodOHZLTzzz8/qlE8WlIs5N1IG5e2Muecc8YGaPJwpGhI+FN3YJAw6bQlkopdYxQSphJgJ1H9kFtxkByrSg5SUsKe2gg9qXJ8qHWhUbJYzBaerFeZnBYK+yRB8ZYktllmmSV2QSRFpEbL8dIdRCM4NQaIJCFQjg5SIEsalSQK+E4qL1UYaqRNZazU8HmcEgbpKpiaukVW8h4yqheNkoWqoWZAHQDJIOMV0gJX5nniiSdGyaGxWaoJ5ymTxEb9Sun36ghc3xCVXmQkC6cD6aYOW0p7Y8PrDUex64oNVYjqwEe3S4n7tymZM989j7EzzH85KnVRsniI9HM1JgKISlo91EQUH6ytjR1cdZocL3aKv5EYCpI0blYGqtNGYQfBMQnfjc1CArJZSo2Gtkgaxa5tOHy++Rhd+K76EIg9IV8eLT9kLvPgskWTttMYGiULySLVmRu4UKqAD0UANgqyqN6z4yZXsB0XcVwjZXp0d+CmwncwkHpMjEqB2sgFn1Q9NSp5tOygXuuSiTicNmmNF0OjaphF4c1GQvogYou0Ua3HXvHT4TEJhf9hqf+8NcO8sO94ETXskP4z88wzRxswj5YZ5tu8s6+ZDiR9s8jScMGnAXZEnjGFW3pY8ZbpvpFQeG1Lwv9J6hnUpDE1fL7NZHTvkTqnlodXUcms6sg8mj/233//EYM3ttQovIZjiirm2ZZ6po2SpRBp8adBz/blNFZgrwhEUrcS0nUtDTfLkcBm4slTt20SKj0EWUmFQqnbHCCc+JOArvlLLU7zaN5IbWKFNsoZ5l2XIdWWwgCj2gBLksUb2RseKNUrkcBiEaBkr2iXeeaZZ0Zpk+AaC8nC9aXYPy0BNpOSUw3mBE3VaVd6+FxOCxkNha70jNpGKZIkNEoWLjWk0AiP8a7tDuJQQRj+Ivfa0vgpSOfvCRhK+gjgJW9YS8DuQPcUG3JIaTruoFLDkQk+V9cVjdxaczea1oiiZLHYRdzpdYsuumjsy6SpBFWB61S7Hh4wx7FJt7fLFoIUkn7PdawVDXK1BBhoJJkMAt1QxtRwv0qh3WdG60FRslh0FruGZVQtUXgxFRJCTIAxyrBPwciGxj2pwssjd0yBV0t1bvF/J70zGfpjYhQa+RmtB/8hS7I3uIY1oCY9dADUc5fRTCVzuKVUFqflKg0WuQcLCFF4yjSk0L9JRrK/Z2TUOoqSxc5JWpAMeu5qWMb+4GLTuMzvuiTKB+OvFq2XcCnWoskZW4HEcXZ7SwckMzLGFIqqYQijaZv6Ff1lSQ8JhAiiP7HcK3q7FBc2jWuk5rNPGMDqWUT+eYt8VmPwWqnXMzKqCUXJAlQxMQXpGBImnR1Ossgo5hLmCaKWaWtEsgju8HxR06SvI0opnT4RJZMlo1bQKFksYraGGIngDe+YRMPCQBwyIA0pJCgkh4z7tqGNkgmRUQ8oSZaMjIx/0ShZIBMmI+NflCRLRkbGv8hkycgoE5ksGRllIpMlI6NMZLJkjDY4goQRRjUKHUb+XThqAZksGU2ChS0dShqTGiaxNTE2WdiK7koNhVmy1lNFYsNR7chkyRgl0mJOQWrEUKqgyE5JtII4Q2dSBXJSonr37v2f5hBaaskfFLguJEka1Y5MloyygChKLTR8d1a/ZFlZ6XrDyUCXnW74t79pZNKmTZtYIOin0alTp1iyIesjkyWjLqG+SeGfRoQyztu2bRuJoTuKbqXqnhzRjhjqn7ymOFBpB1IZytCdW6+SlQqXyZJRN7B4GeXsC0eNOCYEMRT9de3aNTZ+T4mzEm2pWV5XEOgapyzoRErtUoKNJFr4SrAlpdLnJ8M/kyWjZpEWs06NeizoQeAodoRgq2hKx2DXGUXBnx4N/fv3jz3kdP3Rr4BdQ+VCENIE8Qo/O5GkFogCmSwZRWEBa1qif8JWW20VJYZCP9KE90v2OQmRFj3Dn/RQHMhu0bfhqquuGqn4r5AUiSSFf6t2ZLJkFAUpoPkHFatjx47xaBFl4ipoG5ZggDZUTp7u06dPLDdnxzjoimSqF2SyZBQFiaBpiUOseLK6dOkS7ZbC/nCFIFlUz7JleMO0yHKIVSZLRt1D8FCTEh4t3i0erSFDhkS1qxjYJoMHD45l5Txi3bp1iwdKFaphtY5MloyRkOwI1bGaj3Tu3Dm0a9cuBhy1wmrMxnCwkyNKOABIlp49e0ZyFVPZahWZLBkjARlID25enT0FHgUTBwwYEF3I6Zo00u88Y/369YuxF/2vnY6mh0M9IZMlYyRY+KSBZiSON+zQoUPo3r17PCYx2R8NycJrNnTo0NCrV68YY6G66QCkZ0M9IZMl4z8gWTQocSq1Y0XETpyhmQ6cLSSLoWGJDqSI1b59+yiRSCaR/3pCJktGUWh3xfvFq8UNLFJfTLIIODLsBS2nmGKKeFYPKVNPhn1CJktGUVjsXMGOQpQL5hg/UXvN0MVgqF6i99JZNF+UC+ZaxEGgekQmS0ZRsFvUqkieZLMw9HnEnKCgD7aTrJ2soFspopAogwYNCsOGDRv+CfWHTJaMRkGCyDaWEOncxR49esTsYYeWiuaTKFr2OlVBqgvVzXuoZ/WITJaMkmCkU7e07R04cGDo27dvbNerLkXrXn+XFpNOqoZMloxWDaQR1aeaCVgikBSXlEncGpDJktEkJC9Ya0QmS0ZGmchkycgoE5ksGRllIpMlI6NMZLJkZJSJTJaMjDKRyZKRUSYyWTIyykQmS0ZGWQjh/wDDYvow1+jDeQAAAABJRU5ErkJggg=="
    },
    "2471bbcf-afb6-4790-866f-689c01f19d6f.PNG": {
     "image/png": ""
    }
   },
   "cell_type": "markdown",
   "id": "206aa209",
   "metadata": {
    "papermill": {
     "duration": 0.014269,
     "end_time": "2024-09-22T15:16:57.427341",
     "exception": false,
     "start_time": "2024-09-22T15:16:57.413072",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Feature Engineering\n",
    "## Feature Preprocessing\n",
    "### Definition: Updating and transforming the existing features\n",
    "#### - Feature transformation [For continuous variable]\n",
    "<p>When to apply: relationship between target variable and feature are non-linear.</p>\n",
    "\n",
    "<p>How to apply:\n",
    "\n",
    "    `Positive skewed distribution: square of cube root or log`\n",
    "\n",
    "    `Left skewed distribution: square cube or exponential`\n",
    "\n",
    "    ***Input must be greater than 0. Exp: Log(X+C)***</p>\n",
    "\n",
    "#### - Feature scaling [For continuous variable]\n",
    "<p>When to apply: variables are all in different units.</p>\n",
    "<p>Exp: loan amount is in thousands, income is in hundreds and Emi is in dollars only</p>\n",
    "\n",
    "How to apply:\n",
    "\n",
    "`Min-Max Scaler:`\n",
    "\n",
    "![Capture.PNG](attachment:2471bbcf-afb6-4790-866f-689c01f19d6f.PNG)\n",
    "\n",
    "`Standard Scaler:`\n",
    "\n",
    "![Capture2.PNG](attachment:233dcdea-831f-4a3e-b239-763898a14efe.PNG)\n",
    "\n",
    "- One Hot Encoding (also known as dummies encoding) [For categorical variable]\n",
    "- Label Encoding\n",
    "\n",
    "| Column Names | One-Hot Encoding | Label Encoding |\n",
    "| -------- | ------- | -------- |\n",
    "| Description | Converts each unique category value into a new binary column. | Assigns each unique category value an integer. |\n",
    "| Example | “India” -> [1, 0, 0] <br> “Japan” -> [0, 1, 0] <br> “USA” -> [0, 0, 1] | “India” -> 0 <br> “Japan” -> 1 <br> “USA” -> 2 |\n",
    "| When to Use | Non-ordinal categorical features. Manageable number of unique categories. | Ordinal categorical features. Large number of unique categories. |\n",
    "| Advantages | - Prevents the model from assuming any inherent order. | - Simple and efficient for ordinal data. <br> - Does not increase dimensionality. |\n",
    "| Disadvantages | - Can lead to high dimensionality with many unique categories. | - Imposes an arbitrary order on non-ordinal data. <br> - Model might assume false relationships. |\n",
    "\n",
    "Key Takeaways:\n",
    "- Label encoding assigns integers to categories, but can imply false ordinal relationships\n",
    "- One-hot encoding creates binary columns for each category, avoiding implied ordering\n",
    "- Choose encoding method based on data type (ordinal vs. nominal) and number of categories\n",
    "\n",
    "#### - Combining Sparse Class\n",
    "| Description | Assign a large quantity of unique category with value an integer by specifying the requirement |\n",
    "| ------- | ------- |\n",
    "| Example | Country: \"Mumbai\", \"Jaipur\", \"Ahmedabad\", \"Indore\", \"Raipur\", \"Guwahati\",... <br> **\"Ahmedabad\", \"Indore\", \"Raipur\", \"Guwahati\" are having low frequency** <br> [\"Ahmedabad\", \"Indore\", \"Raipur\", \"Guwahati\"] -> Others |\n",
    "| When to use | Non-ordinal categorical features. Larger number of unique categories |\n",
    "| Advantages | - Avoid from too many variables are created <br> - Does not explode the dimensionality |\n",
    "| Disadvantages | |\n",
    "\n",
    "## Feature Generation\n",
    "### Definition: Creating new features from the excisting data\n",
    "#### - [Binning](#Binning) (Better way to do binning: [Binning Using Decision Tree Split](#DecisionTreeSplit))\n",
    "| Description | Assign different range of values into different categories|\n",
    "| ------- | ------- |\n",
    "| Example | bins = [0,12,19,30,60,90] <br> group = ['child','teenager','young_adult','middle_aged','senior_citizen'] |\n",
    "| When to use | Ordinal categorical features. Larger number of unique categories |\n",
    "| Advantages | |\n",
    "| Disadvantages | |\n",
    "\n",
    "#### - [Feature Interaction](#FeatureInteraction)\n",
    "- Addition\n",
    "- Ratio\n",
    "- Difference\n",
    "\n",
    "#### - [Missing Values](#MissingValues)\n",
    "\n",
    "#### - [Frequency Coding](#FrequencyCoding)\n",
    "\n",
    "## [Feature Engineering with Datetime](#Datetime)\n",
    "\n",
    "# [Automated Feature Engineering](#AutomatedFeatureEngineering)\n",
    "| Library | Featuretools |\n",
    "| ------- | ------- |\n",
    "| Components | - Entities <br> - Feature Primitives <br> - Deep Feature Synthesis <br> Library: Use `featuretools` |\n",
    "\n",
    "URL: https://www.youtube.com/watch?v=uu8um0JmYA8&t=2212s\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ccc5a017",
   "metadata": {
    "papermill": {
     "duration": 0.012731,
     "end_time": "2024-09-22T15:16:57.453423",
     "exception": false,
     "start_time": "2024-09-22T15:16:57.440692",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "<a id='Binning'></a>\n",
    "#### Binning"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "4b730cd3",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2024-09-22T15:16:57.481563Z",
     "iopub.status.busy": "2024-09-22T15:16:57.481107Z",
     "iopub.status.idle": "2024-09-22T15:16:57.928390Z",
     "shell.execute_reply": "2024-09-22T15:16:57.927323Z"
    },
    "papermill": {
     "duration": 0.464231,
     "end_time": "2024-09-22T15:16:57.930643",
     "exception": false,
     "start_time": "2024-09-22T15:16:57.466412",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>gender</th>\n",
       "      <th>age</th>\n",
       "      <th>hypertension</th>\n",
       "      <th>heart_disease</th>\n",
       "      <th>ever_married</th>\n",
       "      <th>work_type</th>\n",
       "      <th>Residence_type</th>\n",
       "      <th>avg_glucose_level</th>\n",
       "      <th>bmi</th>\n",
       "      <th>smoking_status</th>\n",
       "      <th>stroke</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>9046</td>\n",
       "      <td>Male</td>\n",
       "      <td>67.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Private</td>\n",
       "      <td>Urban</td>\n",
       "      <td>228.69</td>\n",
       "      <td>36.6</td>\n",
       "      <td>formerly smoked</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>51676</td>\n",
       "      <td>Female</td>\n",
       "      <td>61.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Self-employed</td>\n",
       "      <td>Rural</td>\n",
       "      <td>202.21</td>\n",
       "      <td>NaN</td>\n",
       "      <td>never smoked</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>31112</td>\n",
       "      <td>Male</td>\n",
       "      <td>80.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Private</td>\n",
       "      <td>Rural</td>\n",
       "      <td>105.92</td>\n",
       "      <td>32.5</td>\n",
       "      <td>never smoked</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>60182</td>\n",
       "      <td>Female</td>\n",
       "      <td>49.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Private</td>\n",
       "      <td>Urban</td>\n",
       "      <td>171.23</td>\n",
       "      <td>34.4</td>\n",
       "      <td>smokes</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1665</td>\n",
       "      <td>Female</td>\n",
       "      <td>79.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Self-employed</td>\n",
       "      <td>Rural</td>\n",
       "      <td>174.12</td>\n",
       "      <td>24.0</td>\n",
       "      <td>never smoked</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      id  gender   age  hypertension  heart_disease ever_married  \\\n",
       "0   9046    Male  67.0             0              1          Yes   \n",
       "1  51676  Female  61.0             0              0          Yes   \n",
       "2  31112    Male  80.0             0              1          Yes   \n",
       "3  60182  Female  49.0             0              0          Yes   \n",
       "4   1665  Female  79.0             1              0          Yes   \n",
       "\n",
       "       work_type Residence_type  avg_glucose_level   bmi   smoking_status  \\\n",
       "0        Private          Urban             228.69  36.6  formerly smoked   \n",
       "1  Self-employed          Rural             202.21   NaN     never smoked   \n",
       "2        Private          Rural             105.92  32.5     never smoked   \n",
       "3        Private          Urban             171.23  34.4           smokes   \n",
       "4  Self-employed          Rural             174.12  24.0     never smoked   \n",
       "\n",
       "   stroke  \n",
       "0       1  \n",
       "1       1  \n",
       "2       1  \n",
       "3       1  \n",
       "4       1  "
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Binning\n",
    "import pandas as pd\n",
    "\n",
    "stroke_data = pd.read_csv('/kaggle/input/stroke-prediction-dataset/healthcare-dataset-stroke-data.csv')\n",
    "stroke_data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "c4c10e1a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-22T15:16:57.960843Z",
     "iopub.status.busy": "2024-09-22T15:16:57.960441Z",
     "iopub.status.idle": "2024-09-22T15:16:57.977903Z",
     "shell.execute_reply": "2024-09-22T15:16:57.977078Z"
    },
    "papermill": {
     "duration": 0.036021,
     "end_time": "2024-09-22T15:16:57.980091",
     "exception": false,
     "start_time": "2024-09-22T15:16:57.944070",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#Creating Bins\n",
    "bins = [0,12,19,30,60,90]\n",
    "group = ['child','teenager','young_adult','middle_aged','senior_citizen']\n",
    "stroke_data['age_category'] = pd.cut(stroke_data['age'], bins, labels=group)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "221b50e1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-22T15:16:58.009094Z",
     "iopub.status.busy": "2024-09-22T15:16:58.008675Z",
     "iopub.status.idle": "2024-09-22T15:16:58.022574Z",
     "shell.execute_reply": "2024-09-22T15:16:58.021575Z"
    },
    "papermill": {
     "duration": 0.030675,
     "end_time": "2024-09-22T15:16:58.024694",
     "exception": false,
     "start_time": "2024-09-22T15:16:57.994019",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>age_category</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>67.0</td>\n",
       "      <td>senior_citizen</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>61.0</td>\n",
       "      <td>senior_citizen</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>80.0</td>\n",
       "      <td>senior_citizen</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>49.0</td>\n",
       "      <td>middle_aged</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>79.0</td>\n",
       "      <td>senior_citizen</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    age    age_category\n",
       "0  67.0  senior_citizen\n",
       "1  61.0  senior_citizen\n",
       "2  80.0  senior_citizen\n",
       "3  49.0     middle_aged\n",
       "4  79.0  senior_citizen"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "stroke_data[['age', 'age_category']].head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6473d7e1",
   "metadata": {
    "papermill": {
     "duration": 0.013826,
     "end_time": "2024-09-22T15:16:58.052477",
     "exception": false,
     "start_time": "2024-09-22T15:16:58.038651",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "<a id='DecisionTreeSplit'></a>\n",
    "#### Binning Using Decision Tree Split"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "0aee8a58",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-22T15:16:58.081324Z",
     "iopub.status.busy": "2024-09-22T15:16:58.080886Z",
     "iopub.status.idle": "2024-09-22T15:16:59.666678Z",
     "shell.execute_reply": "2024-09-22T15:16:59.665527Z"
    },
    "papermill": {
     "duration": 1.60307,
     "end_time": "2024-09-22T15:16:59.669110",
     "exception": false,
     "start_time": "2024-09-22T15:16:58.066040",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Split Points: [ 0.  44.5 53.5 67.5 75.5]\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "from sklearn.tree import DecisionTreeRegressor\n",
    "\n",
    "# Feature (age) and target (stroke) - you can adjust this based on your use case\n",
    "X = stroke_data[['age']]  # Feature: Age\n",
    "y = stroke_data['stroke'] # Target: Stroke\n",
    "\n",
    "tree = DecisionTreeRegressor(max_leaf_nodes=5)  # Adjust max_leaf_nodes as per requirement\n",
    "tree.fit(X, y)\n",
    "\n",
    "# Extract split points from the decision tree\n",
    "split_points = np.sort(tree.tree_.threshold[tree.tree_.threshold != -2])  # Removing invalid split points (-2)\n",
    "\n",
    "# Include 0 as the lower bound\n",
    "split_points = np.concatenate(([0], split_points))\n",
    "\n",
    "print(\"Split Points:\", split_points)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "74b18d9e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-22T15:16:59.698812Z",
     "iopub.status.busy": "2024-09-22T15:16:59.697929Z",
     "iopub.status.idle": "2024-09-22T15:16:59.709170Z",
     "shell.execute_reply": "2024-09-22T15:16:59.708199Z"
    },
    "papermill": {
     "duration": 0.028728,
     "end_time": "2024-09-22T15:16:59.711712",
     "exception": false,
     "start_time": "2024-09-22T15:16:59.682984",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "       age  age_binned\n",
      "0     67.0           3\n",
      "1     61.0           3\n",
      "2     80.0           5\n",
      "3     49.0           2\n",
      "4     79.0           5\n",
      "...    ...         ...\n",
      "5105  80.0           5\n",
      "5106  81.0           5\n",
      "5107  35.0           1\n",
      "5108  51.0           2\n",
      "5109  44.0           1\n",
      "\n",
      "[5110 rows x 2 columns]\n"
     ]
    }
   ],
   "source": [
    "# Bin the age data using the split points\n",
    "stroke_data['age_binned'] = np.digitize(stroke_data['age'], bins=split_points, right=False)\n",
    "\n",
    "# Output the DataFrame with binned age\n",
    "print(stroke_data[['age', 'age_binned']])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "19bea019",
   "metadata": {
    "papermill": {
     "duration": 0.01322,
     "end_time": "2024-09-22T15:16:59.738614",
     "exception": false,
     "start_time": "2024-09-22T15:16:59.725394",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "<a id='FeatureInteraction'></a>\n",
    "#### Feature Interaction"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "1d5fe6a9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-22T15:16:59.767487Z",
     "iopub.status.busy": "2024-09-22T15:16:59.767067Z",
     "iopub.status.idle": "2024-09-22T15:16:59.794915Z",
     "shell.execute_reply": "2024-09-22T15:16:59.793783Z"
    },
    "papermill": {
     "duration": 0.045138,
     "end_time": "2024-09-22T15:16:59.797328",
     "exception": false,
     "start_time": "2024-09-22T15:16:59.752190",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Loan_ID</th>\n",
       "      <th>Gender</th>\n",
       "      <th>Married</th>\n",
       "      <th>Dependents</th>\n",
       "      <th>Education</th>\n",
       "      <th>Self_Employed</th>\n",
       "      <th>ApplicantIncome</th>\n",
       "      <th>CoapplicantIncome</th>\n",
       "      <th>LoanAmount</th>\n",
       "      <th>Loan_Amount_Term</th>\n",
       "      <th>Credit_History</th>\n",
       "      <th>Property_Area</th>\n",
       "      <th>Loan_Status</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>LP001003</td>\n",
       "      <td>Male</td>\n",
       "      <td>Yes</td>\n",
       "      <td>1</td>\n",
       "      <td>Graduate</td>\n",
       "      <td>No</td>\n",
       "      <td>4583</td>\n",
       "      <td>1508.0</td>\n",
       "      <td>128.0</td>\n",
       "      <td>360.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Rural</td>\n",
       "      <td>N</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>LP001005</td>\n",
       "      <td>Male</td>\n",
       "      <td>Yes</td>\n",
       "      <td>0</td>\n",
       "      <td>Graduate</td>\n",
       "      <td>Yes</td>\n",
       "      <td>3000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>66.0</td>\n",
       "      <td>360.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Urban</td>\n",
       "      <td>Y</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>LP001006</td>\n",
       "      <td>Male</td>\n",
       "      <td>Yes</td>\n",
       "      <td>0</td>\n",
       "      <td>Not Graduate</td>\n",
       "      <td>No</td>\n",
       "      <td>2583</td>\n",
       "      <td>2358.0</td>\n",
       "      <td>120.0</td>\n",
       "      <td>360.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Urban</td>\n",
       "      <td>Y</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>LP001008</td>\n",
       "      <td>Male</td>\n",
       "      <td>No</td>\n",
       "      <td>0</td>\n",
       "      <td>Graduate</td>\n",
       "      <td>No</td>\n",
       "      <td>6000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>141.0</td>\n",
       "      <td>360.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Urban</td>\n",
       "      <td>Y</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>LP001013</td>\n",
       "      <td>Male</td>\n",
       "      <td>Yes</td>\n",
       "      <td>0</td>\n",
       "      <td>Not Graduate</td>\n",
       "      <td>No</td>\n",
       "      <td>2333</td>\n",
       "      <td>1516.0</td>\n",
       "      <td>95.0</td>\n",
       "      <td>360.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Urban</td>\n",
       "      <td>Y</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    Loan_ID Gender Married Dependents     Education Self_Employed  \\\n",
       "0  LP001003   Male     Yes          1      Graduate            No   \n",
       "1  LP001005   Male     Yes          0      Graduate           Yes   \n",
       "2  LP001006   Male     Yes          0  Not Graduate            No   \n",
       "3  LP001008   Male      No          0      Graduate            No   \n",
       "4  LP001013   Male     Yes          0  Not Graduate            No   \n",
       "\n",
       "   ApplicantIncome  CoapplicantIncome  LoanAmount  Loan_Amount_Term  \\\n",
       "0             4583             1508.0       128.0             360.0   \n",
       "1             3000                0.0        66.0             360.0   \n",
       "2             2583             2358.0       120.0             360.0   \n",
       "3             6000                0.0       141.0             360.0   \n",
       "4             2333             1516.0        95.0             360.0   \n",
       "\n",
       "   Credit_History Property_Area Loan_Status  \n",
       "0             1.0         Rural           N  \n",
       "1             1.0         Urban           Y  \n",
       "2             1.0         Urban           Y  \n",
       "3             1.0         Urban           Y  \n",
       "4             1.0         Urban           Y  "
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Load Loan Prediction Dataset\n",
    "import pandas as pd\n",
    "\n",
    "loan_data = pd.read_csv('/kaggle/input/loan-status-prediction/loan_data.csv')\n",
    "loan_data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "d67d1090",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-22T15:16:59.826582Z",
     "iopub.status.busy": "2024-09-22T15:16:59.826112Z",
     "iopub.status.idle": "2024-09-22T15:16:59.842299Z",
     "shell.execute_reply": "2024-09-22T15:16:59.841231Z"
    },
    "papermill": {
     "duration": 0.0333,
     "end_time": "2024-09-22T15:16:59.844481",
     "exception": false,
     "start_time": "2024-09-22T15:16:59.811181",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ApplicantIncome</th>\n",
       "      <th>LoanAmount</th>\n",
       "      <th>loan_income_ratio</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>4583</td>\n",
       "      <td>128.0</td>\n",
       "      <td>0.027929</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>3000</td>\n",
       "      <td>66.0</td>\n",
       "      <td>0.022000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2583</td>\n",
       "      <td>120.0</td>\n",
       "      <td>0.046458</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>6000</td>\n",
       "      <td>141.0</td>\n",
       "      <td>0.023500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2333</td>\n",
       "      <td>95.0</td>\n",
       "      <td>0.040720</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   ApplicantIncome  LoanAmount  loan_income_ratio\n",
       "0             4583       128.0           0.027929\n",
       "1             3000        66.0           0.022000\n",
       "2             2583       120.0           0.046458\n",
       "3             6000       141.0           0.023500\n",
       "4             2333        95.0           0.040720"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Feature 1 - Total Income\n",
    "loan_data['Total_income'] = loan_data['ApplicantIncome'] + loan_data['CoapplicantIncome']\n",
    "loan_data[['ApplicantIncome','CoapplicantIncome','Total_income']].head()\n",
    "\n",
    "# Feature 2 - Loan amount and Income ratio\n",
    "loan_data['loan_income_ratio'] = loan_data['LoanAmount'] / loan_data['ApplicantIncome']\n",
    "loan_data[['ApplicantIncome','LoanAmount','loan_income_ratio']].head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "23a48a3f",
   "metadata": {
    "papermill": {
     "duration": 0.013928,
     "end_time": "2024-09-22T15:16:59.872538",
     "exception": false,
     "start_time": "2024-09-22T15:16:59.858610",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "<a id='MissingValues'></a>\n",
    "#### Missing Values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "3f09031d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-22T15:16:59.902903Z",
     "iopub.status.busy": "2024-09-22T15:16:59.902097Z",
     "iopub.status.idle": "2024-09-22T15:16:59.907072Z",
     "shell.execute_reply": "2024-09-22T15:16:59.905989Z"
    },
    "papermill": {
     "duration": 0.022492,
     "end_time": "2024-09-22T15:16:59.909229",
     "exception": false,
     "start_time": "2024-09-22T15:16:59.886737",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "\n",
    "import warnings\n",
    "warnings.filterwarnings('ignore')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "dbe2345c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-22T15:16:59.939718Z",
     "iopub.status.busy": "2024-09-22T15:16:59.939138Z",
     "iopub.status.idle": "2024-09-22T15:16:59.965941Z",
     "shell.execute_reply": "2024-09-22T15:16:59.964915Z"
    },
    "papermill": {
     "duration": 0.044913,
     "end_time": "2024-09-22T15:16:59.968300",
     "exception": false,
     "start_time": "2024-09-22T15:16:59.923387",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>gender</th>\n",
       "      <th>age</th>\n",
       "      <th>hypertension</th>\n",
       "      <th>heart_disease</th>\n",
       "      <th>ever_married</th>\n",
       "      <th>work_type</th>\n",
       "      <th>Residence_type</th>\n",
       "      <th>avg_glucose_level</th>\n",
       "      <th>bmi</th>\n",
       "      <th>smoking_status</th>\n",
       "      <th>stroke</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>9046</td>\n",
       "      <td>Male</td>\n",
       "      <td>67.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Private</td>\n",
       "      <td>Urban</td>\n",
       "      <td>228.69</td>\n",
       "      <td>36.6</td>\n",
       "      <td>formerly smoked</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>51676</td>\n",
       "      <td>Female</td>\n",
       "      <td>61.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Self-employed</td>\n",
       "      <td>Rural</td>\n",
       "      <td>202.21</td>\n",
       "      <td>NaN</td>\n",
       "      <td>never smoked</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>31112</td>\n",
       "      <td>Male</td>\n",
       "      <td>80.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Private</td>\n",
       "      <td>Rural</td>\n",
       "      <td>105.92</td>\n",
       "      <td>32.5</td>\n",
       "      <td>never smoked</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>60182</td>\n",
       "      <td>Female</td>\n",
       "      <td>49.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Private</td>\n",
       "      <td>Urban</td>\n",
       "      <td>171.23</td>\n",
       "      <td>34.4</td>\n",
       "      <td>smokes</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1665</td>\n",
       "      <td>Female</td>\n",
       "      <td>79.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Self-employed</td>\n",
       "      <td>Rural</td>\n",
       "      <td>174.12</td>\n",
       "      <td>24.0</td>\n",
       "      <td>never smoked</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      id  gender   age  hypertension  heart_disease ever_married  \\\n",
       "0   9046    Male  67.0             0              1          Yes   \n",
       "1  51676  Female  61.0             0              0          Yes   \n",
       "2  31112    Male  80.0             0              1          Yes   \n",
       "3  60182  Female  49.0             0              0          Yes   \n",
       "4   1665  Female  79.0             1              0          Yes   \n",
       "\n",
       "       work_type Residence_type  avg_glucose_level   bmi   smoking_status  \\\n",
       "0        Private          Urban             228.69  36.6  formerly smoked   \n",
       "1  Self-employed          Rural             202.21   NaN     never smoked   \n",
       "2        Private          Rural             105.92  32.5     never smoked   \n",
       "3        Private          Urban             171.23  34.4           smokes   \n",
       "4  Self-employed          Rural             174.12  24.0     never smoked   \n",
       "\n",
       "   stroke  \n",
       "0       1  \n",
       "1       1  \n",
       "2       1  \n",
       "3       1  \n",
       "4       1  "
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "stroke_data = pd.read_csv('/kaggle/input/stroke-prediction-dataset/healthcare-dataset-stroke-data.csv')\n",
    "stroke_data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "969df865",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-22T15:16:59.999793Z",
     "iopub.status.busy": "2024-09-22T15:16:59.998656Z",
     "iopub.status.idle": "2024-09-22T15:17:00.009488Z",
     "shell.execute_reply": "2024-09-22T15:17:00.008510Z"
    },
    "papermill": {
     "duration": 0.028639,
     "end_time": "2024-09-22T15:17:00.011729",
     "exception": false,
     "start_time": "2024-09-22T15:16:59.983090",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "id                     0\n",
       "gender                 0\n",
       "age                    0\n",
       "hypertension           0\n",
       "heart_disease          0\n",
       "ever_married           0\n",
       "work_type              0\n",
       "Residence_type         0\n",
       "avg_glucose_level      0\n",
       "bmi                  201\n",
       "smoking_status         0\n",
       "stroke                 0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "stroke_data.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "05507f78",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-22T15:17:00.043129Z",
     "iopub.status.busy": "2024-09-22T15:17:00.042687Z",
     "iopub.status.idle": "2024-09-22T15:17:00.055607Z",
     "shell.execute_reply": "2024-09-22T15:17:00.054405Z"
    },
    "papermill": {
     "duration": 0.031597,
     "end_time": "2024-09-22T15:17:00.058121",
     "exception": false,
     "start_time": "2024-09-22T15:17:00.026524",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>bmi</th>\n",
       "      <th>bmi_NA</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>36.6</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>32.5</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>34.4</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>24.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    bmi  bmi_NA\n",
       "0  36.6       0\n",
       "1   NaN       1\n",
       "2  32.5       0\n",
       "3  34.4       0\n",
       "4  24.0       0"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "stroke_data['bmi_NA'] = stroke_data['bmi'].isnull()*1\n",
    "stroke_data[['bmi', 'bmi_NA']].head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "890d1569",
   "metadata": {
    "papermill": {
     "duration": 0.014524,
     "end_time": "2024-09-22T15:17:00.088137",
     "exception": false,
     "start_time": "2024-09-22T15:17:00.073613",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "<a id='FrequencyCoding'></a>\n",
    "#### Frequency Coding"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "00758f84",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-22T15:17:00.119535Z",
     "iopub.status.busy": "2024-09-22T15:17:00.119092Z",
     "iopub.status.idle": "2024-09-22T15:17:00.169019Z",
     "shell.execute_reply": "2024-09-22T15:17:00.168019Z"
    },
    "papermill": {
     "duration": 0.068193,
     "end_time": "2024-09-22T15:17:00.171341",
     "exception": false,
     "start_time": "2024-09-22T15:17:00.103148",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Item_Identifier</th>\n",
       "      <th>Item_Weight</th>\n",
       "      <th>Item_Fat_Content</th>\n",
       "      <th>Item_Visibility</th>\n",
       "      <th>Item_Type</th>\n",
       "      <th>Item_MRP</th>\n",
       "      <th>Outlet_Identifier</th>\n",
       "      <th>Outlet_Establishment_Year</th>\n",
       "      <th>Outlet_Size</th>\n",
       "      <th>Outlet_Location_Type</th>\n",
       "      <th>Outlet_Type</th>\n",
       "      <th>Item_Outlet_Sales</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>FDA15</td>\n",
       "      <td>9.30</td>\n",
       "      <td>Low Fat</td>\n",
       "      <td>0.016047</td>\n",
       "      <td>Dairy</td>\n",
       "      <td>249.8092</td>\n",
       "      <td>OUT049</td>\n",
       "      <td>1999</td>\n",
       "      <td>Medium</td>\n",
       "      <td>Tier 1</td>\n",
       "      <td>Supermarket Type1</td>\n",
       "      <td>3735.1380</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>DRC01</td>\n",
       "      <td>5.92</td>\n",
       "      <td>Regular</td>\n",
       "      <td>0.019278</td>\n",
       "      <td>Soft Drinks</td>\n",
       "      <td>48.2692</td>\n",
       "      <td>OUT018</td>\n",
       "      <td>2009</td>\n",
       "      <td>Medium</td>\n",
       "      <td>Tier 3</td>\n",
       "      <td>Supermarket Type2</td>\n",
       "      <td>443.4228</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>FDN15</td>\n",
       "      <td>17.50</td>\n",
       "      <td>Low Fat</td>\n",
       "      <td>0.016760</td>\n",
       "      <td>Meat</td>\n",
       "      <td>141.6180</td>\n",
       "      <td>OUT049</td>\n",
       "      <td>1999</td>\n",
       "      <td>Medium</td>\n",
       "      <td>Tier 1</td>\n",
       "      <td>Supermarket Type1</td>\n",
       "      <td>2097.2700</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>FDX07</td>\n",
       "      <td>19.20</td>\n",
       "      <td>Regular</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>Fruits and Vegetables</td>\n",
       "      <td>182.0950</td>\n",
       "      <td>OUT010</td>\n",
       "      <td>1998</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Tier 3</td>\n",
       "      <td>Grocery Store</td>\n",
       "      <td>732.3800</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>NCD19</td>\n",
       "      <td>8.93</td>\n",
       "      <td>Low Fat</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>Household</td>\n",
       "      <td>53.8614</td>\n",
       "      <td>OUT013</td>\n",
       "      <td>1987</td>\n",
       "      <td>High</td>\n",
       "      <td>Tier 3</td>\n",
       "      <td>Supermarket Type1</td>\n",
       "      <td>994.7052</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  Item_Identifier  Item_Weight Item_Fat_Content  Item_Visibility  \\\n",
       "0           FDA15         9.30          Low Fat         0.016047   \n",
       "1           DRC01         5.92          Regular         0.019278   \n",
       "2           FDN15        17.50          Low Fat         0.016760   \n",
       "3           FDX07        19.20          Regular         0.000000   \n",
       "4           NCD19         8.93          Low Fat         0.000000   \n",
       "\n",
       "               Item_Type  Item_MRP Outlet_Identifier  \\\n",
       "0                  Dairy  249.8092            OUT049   \n",
       "1            Soft Drinks   48.2692            OUT018   \n",
       "2                   Meat  141.6180            OUT049   \n",
       "3  Fruits and Vegetables  182.0950            OUT010   \n",
       "4              Household   53.8614            OUT013   \n",
       "\n",
       "   Outlet_Establishment_Year Outlet_Size Outlet_Location_Type  \\\n",
       "0                       1999      Medium               Tier 1   \n",
       "1                       2009      Medium               Tier 3   \n",
       "2                       1999      Medium               Tier 1   \n",
       "3                       1998         NaN               Tier 3   \n",
       "4                       1987        High               Tier 3   \n",
       "\n",
       "         Outlet_Type  Item_Outlet_Sales  \n",
       "0  Supermarket Type1          3735.1380  \n",
       "1  Supermarket Type2           443.4228  \n",
       "2  Supermarket Type1          2097.2700  \n",
       "3      Grocery Store           732.3800  \n",
       "4  Supermarket Type1           994.7052  "
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "\n",
    "bigmart = pd.read_csv('/kaggle/input/big-mart-sales-dataset/Train.csv')\n",
    "bigmart.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "af15b365",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-22T15:17:00.203193Z",
     "iopub.status.busy": "2024-09-22T15:17:00.202786Z",
     "iopub.status.idle": "2024-09-22T15:17:00.213116Z",
     "shell.execute_reply": "2024-09-22T15:17:00.212152Z"
    },
    "papermill": {
     "duration": 0.028428,
     "end_time": "2024-09-22T15:17:00.215041",
     "exception": false,
     "start_time": "2024-09-22T15:17:00.186613",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Item_Type\n",
       "Fruits and Vegetables    1232\n",
       "Snack Foods              1200\n",
       "Household                 910\n",
       "Frozen Foods              856\n",
       "Dairy                     682\n",
       "Canned                    649\n",
       "Baking Goods              648\n",
       "Health and Hygiene        520\n",
       "Soft Drinks               445\n",
       "Meat                      425\n",
       "Breads                    251\n",
       "Hard Drinks               214\n",
       "Others                    169\n",
       "Starchy Foods             148\n",
       "Breakfast                 110\n",
       "Seafood                    64\n",
       "Name: count, dtype: int64"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bigmart['Item_Type'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "d36e8e29",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-22T15:17:00.247049Z",
     "iopub.status.busy": "2024-09-22T15:17:00.246261Z",
     "iopub.status.idle": "2024-09-22T15:17:00.255242Z",
     "shell.execute_reply": "2024-09-22T15:17:00.254181Z"
    },
    "papermill": {
     "duration": 0.027406,
     "end_time": "2024-09-22T15:17:00.257422",
     "exception": false,
     "start_time": "2024-09-22T15:17:00.230016",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Item_Type\n",
       "Fruits and Vegetables    1232\n",
       "Snack Foods              1200\n",
       "Household                 910\n",
       "Frozen Foods              856\n",
       "Dairy                     682\n",
       "Name: count, dtype: int64"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "temp = bigmart['Item_Type'].value_counts()\n",
    "temp.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "a53c7a83",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-22T15:17:00.289587Z",
     "iopub.status.busy": "2024-09-22T15:17:00.289160Z",
     "iopub.status.idle": "2024-09-22T15:17:00.349385Z",
     "shell.execute_reply": "2024-09-22T15:17:00.348304Z"
    },
    "papermill": {
     "duration": 0.079401,
     "end_time": "2024-09-22T15:17:00.351896",
     "exception": false,
     "start_time": "2024-09-22T15:17:00.272495",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Item_Identifier</th>\n",
       "      <th>Item_Type</th>\n",
       "      <th>Item_type_count</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>FDA15</td>\n",
       "      <td>Dairy</td>\n",
       "      <td>682</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>DRC01</td>\n",
       "      <td>Soft Drinks</td>\n",
       "      <td>445</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>FDN15</td>\n",
       "      <td>Meat</td>\n",
       "      <td>425</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>FDX07</td>\n",
       "      <td>Fruits and Vegetables</td>\n",
       "      <td>1232</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>NCD19</td>\n",
       "      <td>Household</td>\n",
       "      <td>910</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  Item_Identifier              Item_Type  Item_type_count\n",
       "0           FDA15                  Dairy              682\n",
       "1           DRC01            Soft Drinks              445\n",
       "2           FDN15                   Meat              425\n",
       "3           FDX07  Fruits and Vegetables             1232\n",
       "4           NCD19              Household              910"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bigmart['Item_type_count'] = bigmart['Item_Type'].apply(lambda x:temp[x])\n",
    "bigmart[['Item_Identifier', 'Item_Type', 'Item_type_count']].head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d6e0fb2f",
   "metadata": {
    "papermill": {
     "duration": 0.015188,
     "end_time": "2024-09-22T15:17:00.382663",
     "exception": false,
     "start_time": "2024-09-22T15:17:00.367475",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "#### Mean Encoding (Using Target Variable)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "3d144759",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-22T15:17:00.415581Z",
     "iopub.status.busy": "2024-09-22T15:17:00.415128Z",
     "iopub.status.idle": "2024-09-22T15:17:00.426402Z",
     "shell.execute_reply": "2024-09-22T15:17:00.425353Z"
    },
    "papermill": {
     "duration": 0.03032,
     "end_time": "2024-09-22T15:17:00.428529",
     "exception": false,
     "start_time": "2024-09-22T15:17:00.398209",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Item_Type</th>\n",
       "      <th>Item_Outlet_Sales</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Dairy</td>\n",
       "      <td>3735.1380</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Soft Drinks</td>\n",
       "      <td>443.4228</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Meat</td>\n",
       "      <td>2097.2700</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Fruits and Vegetables</td>\n",
       "      <td>732.3800</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Household</td>\n",
       "      <td>994.7052</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               Item_Type  Item_Outlet_Sales\n",
       "0                  Dairy          3735.1380\n",
       "1            Soft Drinks           443.4228\n",
       "2                   Meat          2097.2700\n",
       "3  Fruits and Vegetables           732.3800\n",
       "4              Household           994.7052"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bigmart[['Item_Type', 'Item_Outlet_Sales']].head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "4a50e5bf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-22T15:17:00.461383Z",
     "iopub.status.busy": "2024-09-22T15:17:00.460970Z",
     "iopub.status.idle": "2024-09-22T15:17:00.473651Z",
     "shell.execute_reply": "2024-09-22T15:17:00.472490Z"
    },
    "papermill": {
     "duration": 0.031658,
     "end_time": "2024-09-22T15:17:00.475801",
     "exception": false,
     "start_time": "2024-09-22T15:17:00.444143",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Item_Type\n",
       "Baking Goods             1952.971207\n",
       "Breads                   2204.132226\n",
       "Breakfast                2111.808651\n",
       "Canned                   2225.194904\n",
       "Dairy                    2232.542597\n",
       "Frozen Foods             2132.867744\n",
       "Fruits and Vegetables    2289.009592\n",
       "Hard Drinks              2139.221622\n",
       "Health and Hygiene       2010.000265\n",
       "Household                2258.784300\n",
       "Meat                     2158.977911\n",
       "Others                   1926.139702\n",
       "Seafood                  2326.065928\n",
       "Snack Foods              2277.321739\n",
       "Soft Drinks              2006.511735\n",
       "Starchy Foods            2374.332773\n",
       "Name: Item_Outlet_Sales, dtype: float64"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bigmart.groupby('Item_Type')['Item_Outlet_Sales'].mean()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9540cc16",
   "metadata": {
    "papermill": {
     "duration": 0.015516,
     "end_time": "2024-09-22T15:17:00.507075",
     "exception": false,
     "start_time": "2024-09-22T15:17:00.491559",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "<a id='Datetime'></a>\n",
    "#### Feature Engineering with Datetime"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "fca91a18",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-22T15:17:00.542171Z",
     "iopub.status.busy": "2024-09-22T15:17:00.541236Z",
     "iopub.status.idle": "2024-09-22T15:17:00.586371Z",
     "shell.execute_reply": "2024-09-22T15:17:00.585261Z"
    },
    "papermill": {
     "duration": 0.064236,
     "end_time": "2024-09-22T15:17:00.588515",
     "exception": false,
     "start_time": "2024-09-22T15:17:00.524279",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Date</th>\n",
       "      <th>Time</th>\n",
       "      <th>NO2(GT)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>10/03/2004</td>\n",
       "      <td>18:00:00</td>\n",
       "      <td>113.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>10/03/2004</td>\n",
       "      <td>19:00:00</td>\n",
       "      <td>92.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>10/03/2004</td>\n",
       "      <td>20:00:00</td>\n",
       "      <td>114.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>10/03/2004</td>\n",
       "      <td>21:00:00</td>\n",
       "      <td>122.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>10/03/2004</td>\n",
       "      <td>22:00:00</td>\n",
       "      <td>116.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         Date      Time  NO2(GT)\n",
       "0  10/03/2004  18:00:00    113.0\n",
       "1  10/03/2004  19:00:00     92.0\n",
       "2  10/03/2004  20:00:00    114.0\n",
       "3  10/03/2004  21:00:00    122.0\n",
       "4  10/03/2004  22:00:00    116.0"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "\n",
    "df = pd.read_csv('/kaggle/input/air-quality-dataset/Air Quality.csv')\n",
    "df = df[['Date', 'Time','NO2(GT)']]\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "210c0c94",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-22T15:17:00.622419Z",
     "iopub.status.busy": "2024-09-22T15:17:00.621602Z",
     "iopub.status.idle": "2024-09-22T15:17:00.671410Z",
     "shell.execute_reply": "2024-09-22T15:17:00.670371Z"
    },
    "papermill": {
     "duration": 0.068849,
     "end_time": "2024-09-22T15:17:00.673422",
     "exception": false,
     "start_time": "2024-09-22T15:17:00.604573",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Date                 object\n",
       "Time                 object\n",
       "NO2(GT)             float64\n",
       "Date_Time    datetime64[ns]\n",
       "dtype: object"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['Date_Time'] = pd.to_datetime(df['Date'] + ' ' + df['Time'], format='%d/%m/%Y %H:%M:%S')\n",
    "df.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "28573201",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-22T15:17:00.708069Z",
     "iopub.status.busy": "2024-09-22T15:17:00.706940Z",
     "iopub.status.idle": "2024-09-22T15:17:00.716450Z",
     "shell.execute_reply": "2024-09-22T15:17:00.715370Z"
    },
    "papermill": {
     "duration": 0.029083,
     "end_time": "2024-09-22T15:17:00.718733",
     "exception": false,
     "start_time": "2024-09-22T15:17:00.689650",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    18.0\n",
       "1    19.0\n",
       "2    20.0\n",
       "3    21.0\n",
       "4    22.0\n",
       "Name: Date_Time, dtype: float64"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Extract hour and minute\n",
    "df['Date_Time'].dt.hour.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "4c696ee4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-22T15:17:00.753330Z",
     "iopub.status.busy": "2024-09-22T15:17:00.752315Z",
     "iopub.status.idle": "2024-09-22T15:17:00.761562Z",
     "shell.execute_reply": "2024-09-22T15:17:00.760492Z"
    },
    "papermill": {
     "duration": 0.028894,
     "end_time": "2024-09-22T15:17:00.763706",
     "exception": false,
     "start_time": "2024-09-22T15:17:00.734812",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    0.0\n",
       "1    0.0\n",
       "2    0.0\n",
       "3    0.0\n",
       "4    0.0\n",
       "Name: Date_Time, dtype: float64"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['Date_Time'].dt.minute.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "a801cc8a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-22T15:17:00.798199Z",
     "iopub.status.busy": "2024-09-22T15:17:00.797392Z",
     "iopub.status.idle": "2024-09-22T15:17:00.808113Z",
     "shell.execute_reply": "2024-09-22T15:17:00.807077Z"
    },
    "papermill": {
     "duration": 0.03051,
     "end_time": "2024-09-22T15:17:00.810376",
     "exception": false,
     "start_time": "2024-09-22T15:17:00.779866",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    Wednesday\n",
       "1    Wednesday\n",
       "2    Wednesday\n",
       "3    Wednesday\n",
       "4    Wednesday\n",
       "Name: Date_Time, dtype: object"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# The day of week - Monday(0) to Sunday(6)\n",
    "df['Date_Time'].dt.day_name().head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "1c0b3770",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-22T15:17:00.845115Z",
     "iopub.status.busy": "2024-09-22T15:17:00.844686Z",
     "iopub.status.idle": "2024-09-22T15:17:00.853705Z",
     "shell.execute_reply": "2024-09-22T15:17:00.852670Z"
    },
    "papermill": {
     "duration": 0.029102,
     "end_time": "2024-09-22T15:17:00.855902",
     "exception": false,
     "start_time": "2024-09-22T15:17:00.826800",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    3.0\n",
       "1    3.0\n",
       "2    3.0\n",
       "3    3.0\n",
       "4    3.0\n",
       "Name: Date_Time, dtype: float64"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Extract month\n",
    "df['Date_Time'].dt.month.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "3177ca9f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-22T15:17:00.890805Z",
     "iopub.status.busy": "2024-09-22T15:17:00.889969Z",
     "iopub.status.idle": "2024-09-22T15:17:00.898588Z",
     "shell.execute_reply": "2024-09-22T15:17:00.897509Z"
    },
    "papermill": {
     "duration": 0.028616,
     "end_time": "2024-09-22T15:17:00.900879",
     "exception": false,
     "start_time": "2024-09-22T15:17:00.872263",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    False\n",
       "1    False\n",
       "2    False\n",
       "3    False\n",
       "4    False\n",
       "Name: Date_Time, dtype: bool"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['Date_Time'].dt.is_month_end.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "52d8d9f7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-22T15:17:00.936545Z",
     "iopub.status.busy": "2024-09-22T15:17:00.935717Z",
     "iopub.status.idle": "2024-09-22T15:17:00.965970Z",
     "shell.execute_reply": "2024-09-22T15:17:00.964911Z"
    },
    "papermill": {
     "duration": 0.050862,
     "end_time": "2024-09-22T15:17:00.968412",
     "exception": false,
     "start_time": "2024-09-22T15:17:00.917550",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>year</th>\n",
       "      <th>month</th>\n",
       "      <th>day</th>\n",
       "      <th>hour</th>\n",
       "      <th>dayofyear</th>\n",
       "      <th>week</th>\n",
       "      <th>dayofweek</th>\n",
       "      <th>dayofweekname</th>\n",
       "      <th>quarter</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2004.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>18.0</td>\n",
       "      <td>70.0</td>\n",
       "      <td>11</td>\n",
       "      <td>2.0</td>\n",
       "      <td>Wednesday</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2004.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>19.0</td>\n",
       "      <td>70.0</td>\n",
       "      <td>11</td>\n",
       "      <td>2.0</td>\n",
       "      <td>Wednesday</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2004.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>20.0</td>\n",
       "      <td>70.0</td>\n",
       "      <td>11</td>\n",
       "      <td>2.0</td>\n",
       "      <td>Wednesday</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2004.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>21.0</td>\n",
       "      <td>70.0</td>\n",
       "      <td>11</td>\n",
       "      <td>2.0</td>\n",
       "      <td>Wednesday</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2004.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>22.0</td>\n",
       "      <td>70.0</td>\n",
       "      <td>11</td>\n",
       "      <td>2.0</td>\n",
       "      <td>Wednesday</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     year  month   day  hour  dayofyear  week  dayofweek dayofweekname  \\\n",
       "0  2004.0    3.0  10.0  18.0       70.0    11        2.0     Wednesday   \n",
       "1  2004.0    3.0  10.0  19.0       70.0    11        2.0     Wednesday   \n",
       "2  2004.0    3.0  10.0  20.0       70.0    11        2.0     Wednesday   \n",
       "3  2004.0    3.0  10.0  21.0       70.0    11        2.0     Wednesday   \n",
       "4  2004.0    3.0  10.0  22.0       70.0    11        2.0     Wednesday   \n",
       "\n",
       "   quarter  \n",
       "0      1.0  \n",
       "1      1.0  \n",
       "2      1.0  \n",
       "3      1.0  \n",
       "4      1.0  "
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Concatenate all the datetime feature into a new dataframe\n",
    "new_df = pd.DataFrame({\n",
    "    'year': df['Date_Time'].dt.year,\n",
    "    'month': df['Date_Time'].dt.month,\n",
    "    'day': df['Date_Time'].dt.day,\n",
    "    'hour': df['Date_Time'].dt.hour,\n",
    "    'dayofyear': df['Date_Time'].dt.dayofyear,\n",
    "    'week': df['Date_Time'].dt.isocalendar().week,  # Replaces the deprecated 'week'\n",
    "    'dayofweek': df['Date_Time'].dt.dayofweek,\n",
    "    'dayofweekname': df['Date_Time'].dt.day_name(),  # Replaces 'weekday_name'\n",
    "    'quarter': df['Date_Time'].dt.quarter\n",
    "})\n",
    "\n",
    "new_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "bc1c5332",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-22T15:17:01.004869Z",
     "iopub.status.busy": "2024-09-22T15:17:01.003940Z",
     "iopub.status.idle": "2024-09-22T15:17:01.024756Z",
     "shell.execute_reply": "2024-09-22T15:17:01.023649Z"
    },
    "papermill": {
     "duration": 0.042139,
     "end_time": "2024-09-22T15:17:01.027327",
     "exception": false,
     "start_time": "2024-09-22T15:17:00.985188",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Date</th>\n",
       "      <th>Time</th>\n",
       "      <th>NO2(GT)</th>\n",
       "      <th>Date_Time</th>\n",
       "      <th>year</th>\n",
       "      <th>month</th>\n",
       "      <th>day</th>\n",
       "      <th>hour</th>\n",
       "      <th>dayofyear</th>\n",
       "      <th>week</th>\n",
       "      <th>dayofweek</th>\n",
       "      <th>dayofweekname</th>\n",
       "      <th>quarter</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>10/03/2004</td>\n",
       "      <td>18:00:00</td>\n",
       "      <td>113.0</td>\n",
       "      <td>2004-03-10 18:00:00</td>\n",
       "      <td>2004.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>18.0</td>\n",
       "      <td>70.0</td>\n",
       "      <td>11</td>\n",
       "      <td>2.0</td>\n",
       "      <td>Wednesday</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>10/03/2004</td>\n",
       "      <td>19:00:00</td>\n",
       "      <td>92.0</td>\n",
       "      <td>2004-03-10 19:00:00</td>\n",
       "      <td>2004.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>19.0</td>\n",
       "      <td>70.0</td>\n",
       "      <td>11</td>\n",
       "      <td>2.0</td>\n",
       "      <td>Wednesday</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>10/03/2004</td>\n",
       "      <td>20:00:00</td>\n",
       "      <td>114.0</td>\n",
       "      <td>2004-03-10 20:00:00</td>\n",
       "      <td>2004.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>20.0</td>\n",
       "      <td>70.0</td>\n",
       "      <td>11</td>\n",
       "      <td>2.0</td>\n",
       "      <td>Wednesday</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>10/03/2004</td>\n",
       "      <td>21:00:00</td>\n",
       "      <td>122.0</td>\n",
       "      <td>2004-03-10 21:00:00</td>\n",
       "      <td>2004.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>21.0</td>\n",
       "      <td>70.0</td>\n",
       "      <td>11</td>\n",
       "      <td>2.0</td>\n",
       "      <td>Wednesday</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>10/03/2004</td>\n",
       "      <td>22:00:00</td>\n",
       "      <td>116.0</td>\n",
       "      <td>2004-03-10 22:00:00</td>\n",
       "      <td>2004.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>22.0</td>\n",
       "      <td>70.0</td>\n",
       "      <td>11</td>\n",
       "      <td>2.0</td>\n",
       "      <td>Wednesday</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         Date      Time  NO2(GT)           Date_Time    year  month   day  \\\n",
       "0  10/03/2004  18:00:00    113.0 2004-03-10 18:00:00  2004.0    3.0  10.0   \n",
       "1  10/03/2004  19:00:00     92.0 2004-03-10 19:00:00  2004.0    3.0  10.0   \n",
       "2  10/03/2004  20:00:00    114.0 2004-03-10 20:00:00  2004.0    3.0  10.0   \n",
       "3  10/03/2004  21:00:00    122.0 2004-03-10 21:00:00  2004.0    3.0  10.0   \n",
       "4  10/03/2004  22:00:00    116.0 2004-03-10 22:00:00  2004.0    3.0  10.0   \n",
       "\n",
       "   hour  dayofyear  week  dayofweek dayofweekname  quarter  \n",
       "0  18.0       70.0    11        2.0     Wednesday      1.0  \n",
       "1  19.0       70.0    11        2.0     Wednesday      1.0  \n",
       "2  20.0       70.0    11        2.0     Wednesday      1.0  \n",
       "3  21.0       70.0    11        2.0     Wednesday      1.0  \n",
       "4  22.0       70.0    11        2.0     Wednesday      1.0  "
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "complete_data = pd.concat([df,new_df],axis=1)\n",
    "complete_data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "ceaccaaa",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-22T15:17:01.063730Z",
     "iopub.status.busy": "2024-09-22T15:17:01.062773Z",
     "iopub.status.idle": "2024-09-22T15:17:03.322803Z",
     "shell.execute_reply": "2024-09-22T15:17:03.321628Z"
    },
    "papermill": {
     "duration": 2.28099,
     "end_time": "2024-09-22T15:17:03.325469",
     "exception": false,
     "start_time": "2024-09-22T15:17:01.044479",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# is_weekday\n",
    "complete_data['is_weekday'] = 0\n",
    "\n",
    "for i in range(0, len(complete_data)):\n",
    "    if complete_data['dayofweek'][i] < 5:\n",
    "        complete_data.loc[i, 'is_weekday'] = 1\n",
    "    else:\n",
    "        complete_data.loc[i, 'is_weekday'] = 0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "1fcbafdc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-22T15:17:03.414842Z",
     "iopub.status.busy": "2024-09-22T15:17:03.414421Z",
     "iopub.status.idle": "2024-09-22T15:17:03.425597Z",
     "shell.execute_reply": "2024-09-22T15:17:03.424597Z"
    },
    "papermill": {
     "duration": 0.084506,
     "end_time": "2024-09-22T15:17:03.427749",
     "exception": false,
     "start_time": "2024-09-22T15:17:03.343243",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>dayofweek</th>\n",
       "      <th>is_weekday</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   dayofweek  is_weekday\n",
       "0        2.0           1\n",
       "1        2.0           1\n",
       "2        2.0           1\n",
       "3        2.0           1\n",
       "4        2.0           1"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "complete_data[['dayofweek', 'is_weekday']].head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ab53b7e8",
   "metadata": {
    "papermill": {
     "duration": 0.016881,
     "end_time": "2024-09-22T15:17:03.461887",
     "exception": false,
     "start_time": "2024-09-22T15:17:03.445006",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "##### Difference between Dates"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "28ce989d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-22T15:17:03.498623Z",
     "iopub.status.busy": "2024-09-22T15:17:03.497657Z",
     "iopub.status.idle": "2024-09-22T15:17:03.575590Z",
     "shell.execute_reply": "2024-09-22T15:17:03.574503Z"
    },
    "papermill": {
     "duration": 0.098969,
     "end_time": "2024-09-22T15:17:03.578067",
     "exception": false,
     "start_time": "2024-09-22T15:17:03.479098",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ID</th>\n",
       "      <th>Office_PIN</th>\n",
       "      <th>Application_Receipt_Date</th>\n",
       "      <th>Applicant_City_PIN</th>\n",
       "      <th>Applicant_Gender</th>\n",
       "      <th>Applicant_BirthDate</th>\n",
       "      <th>Applicant_Marital_Status</th>\n",
       "      <th>Applicant_Occupation</th>\n",
       "      <th>Applicant_Qualification</th>\n",
       "      <th>Manager_DOJ</th>\n",
       "      <th>...</th>\n",
       "      <th>Manager_Grade</th>\n",
       "      <th>Manager_Status</th>\n",
       "      <th>Manager_Gender</th>\n",
       "      <th>Manager_DoB</th>\n",
       "      <th>Manager_Num_Application</th>\n",
       "      <th>Manager_Num_Coded</th>\n",
       "      <th>Manager_Business</th>\n",
       "      <th>Manager_Num_Products</th>\n",
       "      <th>Manager_Business2</th>\n",
       "      <th>Manager_Num_Products2</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>FIN1009528</td>\n",
       "      <td>284001</td>\n",
       "      <td>7/2/2008</td>\n",
       "      <td>284001.0</td>\n",
       "      <td>M</td>\n",
       "      <td>8/5/1982</td>\n",
       "      <td>S</td>\n",
       "      <td>Salaried</td>\n",
       "      <td>Graduate</td>\n",
       "      <td>5/26/2008</td>\n",
       "      <td>...</td>\n",
       "      <td>2.0</td>\n",
       "      <td>Probation</td>\n",
       "      <td>F</td>\n",
       "      <td>10/14/1978</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>FIN1009529</td>\n",
       "      <td>800001</td>\n",
       "      <td>7/2/2008</td>\n",
       "      <td>800026.0</td>\n",
       "      <td>M</td>\n",
       "      <td>3/11/1968</td>\n",
       "      <td>M</td>\n",
       "      <td>Salaried</td>\n",
       "      <td>Graduate</td>\n",
       "      <td>6/24/2008</td>\n",
       "      <td>...</td>\n",
       "      <td>2.0</td>\n",
       "      <td>Probation</td>\n",
       "      <td>M</td>\n",
       "      <td>3/3/1971</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>FIN1009530</td>\n",
       "      <td>800001</td>\n",
       "      <td>7/2/2008</td>\n",
       "      <td>NaN</td>\n",
       "      <td>M</td>\n",
       "      <td>12/16/1984</td>\n",
       "      <td>S</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Graduate</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>FIN1009531</td>\n",
       "      <td>800001</td>\n",
       "      <td>7/2/2008</td>\n",
       "      <td>844112.0</td>\n",
       "      <td>M</td>\n",
       "      <td>6/7/1971</td>\n",
       "      <td>S</td>\n",
       "      <td>Salaried</td>\n",
       "      <td>Graduate</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>FIN1009532</td>\n",
       "      <td>533101</td>\n",
       "      <td>7/2/2008</td>\n",
       "      <td>533102.0</td>\n",
       "      <td>M</td>\n",
       "      <td>7/22/1978</td>\n",
       "      <td>S</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Masters of Business Administration</td>\n",
       "      <td>12/4/2007</td>\n",
       "      <td>...</td>\n",
       "      <td>3.0</td>\n",
       "      <td>Confirmation</td>\n",
       "      <td>M</td>\n",
       "      <td>6/23/1977</td>\n",
       "      <td>4.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>97352.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>97352.0</td>\n",
       "      <td>3.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 22 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "           ID  Office_PIN Application_Receipt_Date  Applicant_City_PIN  \\\n",
       "0  FIN1009528      284001                 7/2/2008            284001.0   \n",
       "1  FIN1009529      800001                 7/2/2008            800026.0   \n",
       "2  FIN1009530      800001                 7/2/2008                 NaN   \n",
       "3  FIN1009531      800001                 7/2/2008            844112.0   \n",
       "4  FIN1009532      533101                 7/2/2008            533102.0   \n",
       "\n",
       "  Applicant_Gender Applicant_BirthDate Applicant_Marital_Status  \\\n",
       "0                M            8/5/1982                        S   \n",
       "1                M           3/11/1968                        M   \n",
       "2                M          12/16/1984                        S   \n",
       "3                M            6/7/1971                        S   \n",
       "4                M           7/22/1978                        S   \n",
       "\n",
       "  Applicant_Occupation             Applicant_Qualification Manager_DOJ  ...  \\\n",
       "0             Salaried                            Graduate   5/26/2008  ...   \n",
       "1             Salaried                            Graduate   6/24/2008  ...   \n",
       "2                  NaN                            Graduate         NaN  ...   \n",
       "3             Salaried                            Graduate         NaN  ...   \n",
       "4                  NaN  Masters of Business Administration   12/4/2007  ...   \n",
       "\n",
       "  Manager_Grade Manager_Status  Manager_Gender Manager_DoB  \\\n",
       "0           2.0      Probation               F  10/14/1978   \n",
       "1           2.0      Probation               M    3/3/1971   \n",
       "2           NaN            NaN             NaN         NaN   \n",
       "3           NaN            NaN             NaN         NaN   \n",
       "4           3.0   Confirmation               M   6/23/1977   \n",
       "\n",
       "  Manager_Num_Application Manager_Num_Coded  Manager_Business  \\\n",
       "0                     1.0               0.0               0.0   \n",
       "1                     2.0               0.0               0.0   \n",
       "2                     NaN               NaN               NaN   \n",
       "3                     NaN               NaN               NaN   \n",
       "4                     4.0               1.0           97352.0   \n",
       "\n",
       "   Manager_Num_Products  Manager_Business2  Manager_Num_Products2  \n",
       "0                   0.0                0.0                    0.0  \n",
       "1                   0.0                0.0                    0.0  \n",
       "2                   NaN                NaN                    NaN  \n",
       "3                   NaN                NaN                    NaN  \n",
       "4                   3.0            97352.0                    3.0  \n",
       "\n",
       "[5 rows x 22 columns]"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "\n",
    "agent = pd.read_csv('/kaggle/input/av-datascience/Test_wyCirpO_aS3XPkc.csv')\n",
    "agent.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "7a963f75",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-22T15:17:03.615970Z",
     "iopub.status.busy": "2024-09-22T15:17:03.615199Z",
     "iopub.status.idle": "2024-09-22T15:17:03.625760Z",
     "shell.execute_reply": "2024-09-22T15:17:03.624743Z"
    },
    "papermill": {
     "duration": 0.031502,
     "end_time": "2024-09-22T15:17:03.628027",
     "exception": false,
     "start_time": "2024-09-22T15:17:03.596525",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Application_Receipt_Date</th>\n",
       "      <th>Applicant_BirthDate</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>7/2/2008</td>\n",
       "      <td>8/5/1982</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>7/2/2008</td>\n",
       "      <td>3/11/1968</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>7/2/2008</td>\n",
       "      <td>12/16/1984</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>7/2/2008</td>\n",
       "      <td>6/7/1971</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>7/2/2008</td>\n",
       "      <td>7/22/1978</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  Application_Receipt_Date Applicant_BirthDate\n",
       "0                 7/2/2008            8/5/1982\n",
       "1                 7/2/2008           3/11/1968\n",
       "2                 7/2/2008          12/16/1984\n",
       "3                 7/2/2008            6/7/1971\n",
       "4                 7/2/2008           7/22/1978"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "agent[['Application_Receipt_Date','Applicant_BirthDate']].head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "9576ce60",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-22T15:17:03.665862Z",
     "iopub.status.busy": "2024-09-22T15:17:03.665145Z",
     "iopub.status.idle": "2024-09-22T15:17:03.674609Z",
     "shell.execute_reply": "2024-09-22T15:17:03.673496Z"
    },
    "papermill": {
     "duration": 0.030907,
     "end_time": "2024-09-22T15:17:03.676788",
     "exception": false,
     "start_time": "2024-09-22T15:17:03.645881",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Application_Receipt_Date    object\n",
       "Applicant_BirthDate         object\n",
       "dtype: object"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "agent[['Application_Receipt_Date','Applicant_BirthDate']].dtypes\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "6d449867",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-22T15:17:03.714198Z",
     "iopub.status.busy": "2024-09-22T15:17:03.713410Z",
     "iopub.status.idle": "2024-09-22T15:17:03.740463Z",
     "shell.execute_reply": "2024-09-22T15:17:03.739557Z"
    },
    "papermill": {
     "duration": 0.048436,
     "end_time": "2024-09-22T15:17:03.742976",
     "exception": false,
     "start_time": "2024-09-22T15:17:03.694540",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Since the format of the Application_Receipt_Date is mixed, we must use errors='coerce'\n",
    "agent['Application_Receipt_Date'] = pd.to_datetime(agent['Application_Receipt_Date'], format='%m/%d/%Y', errors='coerce')\n",
    "# Drop rows where Application_Receipt_Date is NaT\n",
    "agent.dropna(subset=['Application_Receipt_Date'], inplace=True)\n",
    "\n",
    "agent['Applicant_BirthDate'] = pd.to_datetime(agent['Applicant_BirthDate'], format='%m/%d/%Y')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "1f58e7a7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-22T15:17:03.781067Z",
     "iopub.status.busy": "2024-09-22T15:17:03.780071Z",
     "iopub.status.idle": "2024-09-22T15:17:03.787397Z",
     "shell.execute_reply": "2024-09-22T15:17:03.786372Z"
    },
    "papermill": {
     "duration": 0.028569,
     "end_time": "2024-09-22T15:17:03.789506",
     "exception": false,
     "start_time": "2024-09-22T15:17:03.760937",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "9463"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(agent['Application_Receipt_Date'][0] - agent['Applicant_BirthDate'][0]).days"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "9c010325",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-22T15:17:03.827394Z",
     "iopub.status.busy": "2024-09-22T15:17:03.827002Z",
     "iopub.status.idle": "2024-09-22T15:17:03.923624Z",
     "shell.execute_reply": "2024-09-22T15:17:03.922505Z"
    },
    "papermill": {
     "duration": 0.11803,
     "end_time": "2024-09-22T15:17:03.925877",
     "exception": false,
     "start_time": "2024-09-22T15:17:03.807847",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Application_Receipt_Date</th>\n",
       "      <th>Applicant_BirthDate</th>\n",
       "      <th>Applicant_age</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2008-07-02</td>\n",
       "      <td>1982-08-05</td>\n",
       "      <td>9463.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2008-07-02</td>\n",
       "      <td>1968-03-11</td>\n",
       "      <td>14723.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2008-07-02</td>\n",
       "      <td>1984-12-16</td>\n",
       "      <td>8599.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2008-07-02</td>\n",
       "      <td>1971-06-07</td>\n",
       "      <td>13540.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2008-07-02</td>\n",
       "      <td>1978-07-22</td>\n",
       "      <td>10938.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  Application_Receipt_Date Applicant_BirthDate  Applicant_age\n",
       "0               2008-07-02          1982-08-05         9463.0\n",
       "1               2008-07-02          1968-03-11        14723.0\n",
       "2               2008-07-02          1984-12-16         8599.0\n",
       "3               2008-07-02          1971-06-07        13540.0\n",
       "4               2008-07-02          1978-07-22        10938.0"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "agent['Applicant_age'] = agent.apply(lambda x: (x['Application_Receipt_Date'] - x['Applicant_BirthDate']).days, axis=1)\n",
    "agent[['Application_Receipt_Date', 'Applicant_BirthDate', 'Applicant_age']].head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "77e72100",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-22T15:17:03.964605Z",
     "iopub.status.busy": "2024-09-22T15:17:03.963801Z",
     "iopub.status.idle": "2024-09-22T15:17:03.984573Z",
     "shell.execute_reply": "2024-09-22T15:17:03.983593Z"
    },
    "papermill": {
     "duration": 0.042586,
     "end_time": "2024-09-22T15:17:03.986697",
     "exception": false,
     "start_time": "2024-09-22T15:17:03.944111",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Application_Receipt_Date</th>\n",
       "      <th>Applicant_BirthDate</th>\n",
       "      <th>Applicant_age</th>\n",
       "      <th>Applicant_age_years_months</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2008-07-02</td>\n",
       "      <td>1982-08-05</td>\n",
       "      <td>9463.0</td>\n",
       "      <td>25.0 years, 11.0 months</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2008-07-02</td>\n",
       "      <td>1968-03-11</td>\n",
       "      <td>14723.0</td>\n",
       "      <td>40.0 years, 4.0 months</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2008-07-02</td>\n",
       "      <td>1984-12-16</td>\n",
       "      <td>8599.0</td>\n",
       "      <td>23.0 years, 6.0 months</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2008-07-02</td>\n",
       "      <td>1971-06-07</td>\n",
       "      <td>13540.0</td>\n",
       "      <td>37.0 years, 1.0 months</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2008-07-02</td>\n",
       "      <td>1978-07-22</td>\n",
       "      <td>10938.0</td>\n",
       "      <td>29.0 years, 11.0 months</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  Application_Receipt_Date Applicant_BirthDate  Applicant_age  \\\n",
       "0               2008-07-02          1982-08-05         9463.0   \n",
       "1               2008-07-02          1968-03-11        14723.0   \n",
       "2               2008-07-02          1984-12-16         8599.0   \n",
       "3               2008-07-02          1971-06-07        13540.0   \n",
       "4               2008-07-02          1978-07-22        10938.0   \n",
       "\n",
       "  Applicant_age_years_months  \n",
       "0    25.0 years, 11.0 months  \n",
       "1     40.0 years, 4.0 months  \n",
       "2     23.0 years, 6.0 months  \n",
       "3     37.0 years, 1.0 months  \n",
       "4    29.0 years, 11.0 months  "
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Function to calculate age in years and months from days\n",
    "def convert_days_to_years_months(days):\n",
    "    years = days // 365  # Integer division to get the number of years\n",
    "    months = (days % 365) // 30  # Remaining days converted to months\n",
    "    return f'{years} years, {months} months'\n",
    "\n",
    "# Apply the conversion to the 'Applicant_age' column\n",
    "agent['Applicant_age_years_months'] = agent['Applicant_age'].apply(lambda x: convert_days_to_years_months(x))\n",
    "\n",
    "# Display the result\n",
    "agent[['Application_Receipt_Date', 'Applicant_BirthDate', 'Applicant_age', 'Applicant_age_years_months']].head()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f620c083",
   "metadata": {
    "papermill": {
     "duration": 0.018169,
     "end_time": "2024-09-22T15:17:04.023658",
     "exception": false,
     "start_time": "2024-09-22T15:17:04.005489",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "<a id='AutomatedFeatureEngineering'></a>\n",
    "### Automated Feature Engineering"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b0e5d9d1",
   "metadata": {
    "papermill": {
     "duration": 0.017833,
     "end_time": "2024-09-22T15:17:04.059747",
     "exception": false,
     "start_time": "2024-09-22T15:17:04.041914",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "#### Entity"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "dc521173",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-22T15:17:04.098240Z",
     "iopub.status.busy": "2024-09-22T15:17:04.097298Z",
     "iopub.status.idle": "2024-09-22T15:17:04.961158Z",
     "shell.execute_reply": "2024-09-22T15:17:04.960203Z"
    },
    "papermill": {
     "duration": 0.885976,
     "end_time": "2024-09-22T15:17:04.963836",
     "exception": false,
     "start_time": "2024-09-22T15:17:04.077860",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import featuretools as ft"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "b7da8adf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-22T15:17:05.005141Z",
     "iopub.status.busy": "2024-09-22T15:17:05.004577Z",
     "iopub.status.idle": "2024-09-22T15:17:05.041280Z",
     "shell.execute_reply": "2024-09-22T15:17:05.039991Z"
    },
    "papermill": {
     "duration": 0.058652,
     "end_time": "2024-09-22T15:17:05.043689",
     "exception": false,
     "start_time": "2024-09-22T15:17:04.985037",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(8523, 12)"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.read_csv('/kaggle/input/big-mart-sales-dataset/Train.csv')\n",
    "df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "8800dbc6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-22T15:17:05.082603Z",
     "iopub.status.busy": "2024-09-22T15:17:05.082143Z",
     "iopub.status.idle": "2024-09-22T15:17:18.002834Z",
     "shell.execute_reply": "2024-09-22T15:17:18.001805Z"
    },
    "papermill": {
     "duration": 12.942589,
     "end_time": "2024-09-22T15:17:18.005155",
     "exception": false,
     "start_time": "2024-09-22T15:17:05.062566",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Entityset: demo_retail_data\n",
       "  DataFrames:\n",
       "    order_products [Rows: 401604, Columns: 8]\n",
       "    products [Rows: 3684, Columns: 4]\n",
       "    orders [Rows: 22190, Columns: 6]\n",
       "    customers [Rows: 4372, Columns: 3]\n",
       "  Relationships:\n",
       "    order_products.product_id -> products.product_id\n",
       "    order_products.order_id -> orders.order_id\n",
       "    orders.customer_name -> customers.customer_name"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()\n",
    "ft.demo.load_retail()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "555af04b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-22T15:17:18.044651Z",
     "iopub.status.busy": "2024-09-22T15:17:18.044221Z",
     "iopub.status.idle": "2024-09-22T15:17:18.050939Z",
     "shell.execute_reply": "2024-09-22T15:17:18.050059Z"
    },
    "papermill": {
     "duration": 0.028875,
     "end_time": "2024-09-22T15:17:18.053081",
     "exception": false,
     "start_time": "2024-09-22T15:17:18.024206",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "features = df.drop('Item_Outlet_Sales', axis=1)\n",
    "y = df['Item_Outlet_Sales']"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "57ee14e9",
   "metadata": {
    "papermill": {
     "duration": 0.018594,
     "end_time": "2024-09-22T15:17:18.090406",
     "exception": false,
     "start_time": "2024-09-22T15:17:18.071812",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "##### Make an entity set and add the entity"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "5b13cb89",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-22T15:17:18.129495Z",
     "iopub.status.busy": "2024-09-22T15:17:18.128628Z",
     "iopub.status.idle": "2024-09-22T15:17:18.135308Z",
     "shell.execute_reply": "2024-09-22T15:17:18.134342Z"
    },
    "papermill": {
     "duration": 0.02858,
     "end_time": "2024-09-22T15:17:18.137548",
     "exception": false,
     "start_time": "2024-09-22T15:17:18.108968",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Entityset: bigmart\n",
       "  DataFrames:\n",
       "  Relationships:\n",
       "    No relationships"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "es = ft.EntitySet(id='bigmart')\n",
    "es"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6001050b",
   "metadata": {
    "papermill": {
     "duration": 0.018134,
     "end_time": "2024-09-22T15:17:18.174107",
     "exception": false,
     "start_time": "2024-09-22T15:17:18.155973",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "##### Add data to this entity set created"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "b27af43c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-22T15:17:18.213186Z",
     "iopub.status.busy": "2024-09-22T15:17:18.212476Z",
     "iopub.status.idle": "2024-09-22T15:17:18.610376Z",
     "shell.execute_reply": "2024-09-22T15:17:18.609304Z"
    },
    "papermill": {
     "duration": 0.419938,
     "end_time": "2024-09-22T15:17:18.612611",
     "exception": false,
     "start_time": "2024-09-22T15:17:18.192673",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Entityset: bigmart\n",
       "  DataFrames:\n",
       "    data_1 [Rows: 8523, Columns: 12]\n",
       "  Relationships:\n",
       "    No relationships"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#es.entity_from_dataframe(entity_id='data_1', dataframe=features, make_index = True, index = 'index')\n",
    "# Updated method to add a dataframe to the entity set\n",
    "\n",
    "es = es.add_dataframe(\n",
    "    dataframe_name='data_1',\n",
    "    dataframe=features,\n",
    "    make_index=True,\n",
    "    index='index'\n",
    ")\n",
    "\n",
    "es"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b95a47be",
   "metadata": {
    "papermill": {
     "duration": 0.018497,
     "end_time": "2024-09-22T15:17:18.650133",
     "exception": false,
     "start_time": "2024-09-22T15:17:18.631636",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "##### Feature Engineering"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "6c72cb1d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-22T15:17:18.689770Z",
     "iopub.status.busy": "2024-09-22T15:17:18.689082Z",
     "iopub.status.idle": "2024-09-22T15:17:18.862172Z",
     "shell.execute_reply": "2024-09-22T15:17:18.861167Z"
    },
    "papermill": {
     "duration": 0.195593,
     "end_time": "2024-09-22T15:17:18.864540",
     "exception": false,
     "start_time": "2024-09-22T15:17:18.668947",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Item_Identifier</th>\n",
       "      <th>Item_Weight</th>\n",
       "      <th>Item_Fat_Content</th>\n",
       "      <th>Item_Visibility</th>\n",
       "      <th>Item_Type</th>\n",
       "      <th>Item_MRP</th>\n",
       "      <th>Outlet_Identifier</th>\n",
       "      <th>Outlet_Establishment_Year</th>\n",
       "      <th>Outlet_Size</th>\n",
       "      <th>Outlet_Location_Type</th>\n",
       "      <th>...</th>\n",
       "      <th>Item_MRP + Outlet_Establishment_Year</th>\n",
       "      <th>Item_Visibility + Item_Weight</th>\n",
       "      <th>Item_Visibility + Outlet_Establishment_Year</th>\n",
       "      <th>Item_Weight + Outlet_Establishment_Year</th>\n",
       "      <th>Item_MRP * Item_Visibility</th>\n",
       "      <th>Item_MRP * Item_Weight</th>\n",
       "      <th>Item_MRP * Outlet_Establishment_Year</th>\n",
       "      <th>Item_Visibility * Item_Weight</th>\n",
       "      <th>Item_Visibility * Outlet_Establishment_Year</th>\n",
       "      <th>Item_Weight * Outlet_Establishment_Year</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>index</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>FDA15</td>\n",
       "      <td>9.30</td>\n",
       "      <td>Low Fat</td>\n",
       "      <td>0.016047</td>\n",
       "      <td>Dairy</td>\n",
       "      <td>249.8092</td>\n",
       "      <td>OUT049</td>\n",
       "      <td>1999</td>\n",
       "      <td>Medium</td>\n",
       "      <td>Tier 1</td>\n",
       "      <td>...</td>\n",
       "      <td>2248.8092</td>\n",
       "      <td>9.316047</td>\n",
       "      <td>1999.016047</td>\n",
       "      <td>2008.30</td>\n",
       "      <td>4.008763</td>\n",
       "      <td>2323.225560</td>\n",
       "      <td>499368.5908</td>\n",
       "      <td>0.149240</td>\n",
       "      <td>32.078555</td>\n",
       "      <td>18590.70</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>DRC01</td>\n",
       "      <td>5.92</td>\n",
       "      <td>Regular</td>\n",
       "      <td>0.019278</td>\n",
       "      <td>Soft Drinks</td>\n",
       "      <td>48.2692</td>\n",
       "      <td>OUT018</td>\n",
       "      <td>2009</td>\n",
       "      <td>Medium</td>\n",
       "      <td>Tier 3</td>\n",
       "      <td>...</td>\n",
       "      <td>2057.2692</td>\n",
       "      <td>5.939278</td>\n",
       "      <td>2009.019278</td>\n",
       "      <td>2014.92</td>\n",
       "      <td>0.930544</td>\n",
       "      <td>285.753664</td>\n",
       "      <td>96972.8228</td>\n",
       "      <td>0.114127</td>\n",
       "      <td>38.729936</td>\n",
       "      <td>11893.28</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>FDN15</td>\n",
       "      <td>17.50</td>\n",
       "      <td>Low Fat</td>\n",
       "      <td>0.016760</td>\n",
       "      <td>Meat</td>\n",
       "      <td>141.6180</td>\n",
       "      <td>OUT049</td>\n",
       "      <td>1999</td>\n",
       "      <td>Medium</td>\n",
       "      <td>Tier 1</td>\n",
       "      <td>...</td>\n",
       "      <td>2140.6180</td>\n",
       "      <td>17.516760</td>\n",
       "      <td>1999.016760</td>\n",
       "      <td>2016.50</td>\n",
       "      <td>2.373528</td>\n",
       "      <td>2478.315000</td>\n",
       "      <td>283094.3820</td>\n",
       "      <td>0.293301</td>\n",
       "      <td>33.503390</td>\n",
       "      <td>34982.50</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>FDX07</td>\n",
       "      <td>19.20</td>\n",
       "      <td>Regular</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>Fruits and Vegetables</td>\n",
       "      <td>182.0950</td>\n",
       "      <td>OUT010</td>\n",
       "      <td>1998</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Tier 3</td>\n",
       "      <td>...</td>\n",
       "      <td>2180.0950</td>\n",
       "      <td>19.200000</td>\n",
       "      <td>1998.000000</td>\n",
       "      <td>2017.20</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>3496.224000</td>\n",
       "      <td>363825.8100</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>38361.60</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>NCD19</td>\n",
       "      <td>8.93</td>\n",
       "      <td>Low Fat</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>Household</td>\n",
       "      <td>53.8614</td>\n",
       "      <td>OUT013</td>\n",
       "      <td>1987</td>\n",
       "      <td>High</td>\n",
       "      <td>Tier 3</td>\n",
       "      <td>...</td>\n",
       "      <td>2040.8614</td>\n",
       "      <td>8.930000</td>\n",
       "      <td>1987.000000</td>\n",
       "      <td>1995.93</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>480.982302</td>\n",
       "      <td>107022.6018</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>17743.91</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 23 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      Item_Identifier  Item_Weight Item_Fat_Content  Item_Visibility  \\\n",
       "index                                                                  \n",
       "0               FDA15         9.30          Low Fat         0.016047   \n",
       "1               DRC01         5.92          Regular         0.019278   \n",
       "2               FDN15        17.50          Low Fat         0.016760   \n",
       "3               FDX07        19.20          Regular         0.000000   \n",
       "4               NCD19         8.93          Low Fat         0.000000   \n",
       "\n",
       "                   Item_Type  Item_MRP Outlet_Identifier  \\\n",
       "index                                                      \n",
       "0                      Dairy  249.8092            OUT049   \n",
       "1                Soft Drinks   48.2692            OUT018   \n",
       "2                       Meat  141.6180            OUT049   \n",
       "3      Fruits and Vegetables  182.0950            OUT010   \n",
       "4                  Household   53.8614            OUT013   \n",
       "\n",
       "       Outlet_Establishment_Year Outlet_Size Outlet_Location_Type  ...  \\\n",
       "index                                                              ...   \n",
       "0                           1999      Medium               Tier 1  ...   \n",
       "1                           2009      Medium               Tier 3  ...   \n",
       "2                           1999      Medium               Tier 1  ...   \n",
       "3                           1998         NaN               Tier 3  ...   \n",
       "4                           1987        High               Tier 3  ...   \n",
       "\n",
       "      Item_MRP + Outlet_Establishment_Year  Item_Visibility + Item_Weight  \\\n",
       "index                                                                       \n",
       "0                                2248.8092                       9.316047   \n",
       "1                                2057.2692                       5.939278   \n",
       "2                                2140.6180                      17.516760   \n",
       "3                                2180.0950                      19.200000   \n",
       "4                                2040.8614                       8.930000   \n",
       "\n",
       "       Item_Visibility + Outlet_Establishment_Year  \\\n",
       "index                                                \n",
       "0                                      1999.016047   \n",
       "1                                      2009.019278   \n",
       "2                                      1999.016760   \n",
       "3                                      1998.000000   \n",
       "4                                      1987.000000   \n",
       "\n",
       "       Item_Weight + Outlet_Establishment_Year  Item_MRP * Item_Visibility  \\\n",
       "index                                                                        \n",
       "0                                      2008.30                    4.008763   \n",
       "1                                      2014.92                    0.930544   \n",
       "2                                      2016.50                    2.373528   \n",
       "3                                      2017.20                    0.000000   \n",
       "4                                      1995.93                    0.000000   \n",
       "\n",
       "       Item_MRP * Item_Weight  Item_MRP * Outlet_Establishment_Year  \\\n",
       "index                                                                 \n",
       "0                 2323.225560                           499368.5908   \n",
       "1                  285.753664                            96972.8228   \n",
       "2                 2478.315000                           283094.3820   \n",
       "3                 3496.224000                           363825.8100   \n",
       "4                  480.982302                           107022.6018   \n",
       "\n",
       "       Item_Visibility * Item_Weight  \\\n",
       "index                                  \n",
       "0                           0.149240   \n",
       "1                           0.114127   \n",
       "2                           0.293301   \n",
       "3                           0.000000   \n",
       "4                           0.000000   \n",
       "\n",
       "       Item_Visibility * Outlet_Establishment_Year  \\\n",
       "index                                                \n",
       "0                                        32.078555   \n",
       "1                                        38.729936   \n",
       "2                                        33.503390   \n",
       "3                                         0.000000   \n",
       "4                                         0.000000   \n",
       "\n",
       "       Item_Weight * Outlet_Establishment_Year  \n",
       "index                                           \n",
       "0                                     18590.70  \n",
       "1                                     11893.28  \n",
       "2                                     34982.50  \n",
       "3                                     38361.60  \n",
       "4                                     17743.91  \n",
       "\n",
       "[5 rows x 23 columns]"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Run deep feture synthesis with transformation primitives\n",
    "feature_matrix, feature_defs = ft.dfs(\n",
    "    entityset=es,\n",
    "    target_dataframe_name='data_1',  # Updated from target_entity\n",
    "    max_depth=1,\n",
    "    trans_primitives=['add_numeric', 'multiply_numeric']\n",
    ")\n",
    "\n",
    "# Display the feature matrix\n",
    "feature_matrix.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "4834d701",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-22T15:17:18.906007Z",
     "iopub.status.busy": "2024-09-22T15:17:18.904974Z",
     "iopub.status.idle": "2024-09-22T15:17:18.912368Z",
     "shell.execute_reply": "2024-09-22T15:17:18.911217Z"
    },
    "papermill": {
     "duration": 0.030716,
     "end_time": "2024-09-22T15:17:18.914589",
     "exception": false,
     "start_time": "2024-09-22T15:17:18.883873",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<Feature: Item_Identifier>,\n",
       " <Feature: Item_Weight>,\n",
       " <Feature: Item_Fat_Content>,\n",
       " <Feature: Item_Visibility>,\n",
       " <Feature: Item_Type>,\n",
       " <Feature: Item_MRP>,\n",
       " <Feature: Outlet_Identifier>,\n",
       " <Feature: Outlet_Establishment_Year>,\n",
       " <Feature: Outlet_Size>,\n",
       " <Feature: Outlet_Location_Type>,\n",
       " <Feature: Outlet_Type>,\n",
       " <Feature: Item_MRP + Item_Visibility>,\n",
       " <Feature: Item_MRP + Item_Weight>,\n",
       " <Feature: Item_MRP + Outlet_Establishment_Year>,\n",
       " <Feature: Item_Visibility + Item_Weight>,\n",
       " <Feature: Item_Visibility + Outlet_Establishment_Year>,\n",
       " <Feature: Item_Weight + Outlet_Establishment_Year>,\n",
       " <Feature: Item_MRP * Item_Visibility>,\n",
       " <Feature: Item_MRP * Item_Weight>,\n",
       " <Feature: Item_MRP * Outlet_Establishment_Year>,\n",
       " <Feature: Item_Visibility * Item_Weight>,\n",
       " <Feature: Item_Visibility * Outlet_Establishment_Year>,\n",
       " <Feature: Item_Weight * Outlet_Establishment_Year>]"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "feature_defs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "3f0ba83d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-22T15:17:18.956305Z",
     "iopub.status.busy": "2024-09-22T15:17:18.955252Z",
     "iopub.status.idle": "2024-09-22T15:17:18.962569Z",
     "shell.execute_reply": "2024-09-22T15:17:18.961310Z"
    },
    "papermill": {
     "duration": 0.030795,
     "end_time": "2024-09-22T15:17:18.965002",
     "exception": false,
     "start_time": "2024-09-22T15:17:18.934207",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(8523, 23)"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "feature_matrix.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "93dda9d7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-22T15:17:19.006672Z",
     "iopub.status.busy": "2024-09-22T15:17:19.006246Z",
     "iopub.status.idle": "2024-09-22T15:17:19.188846Z",
     "shell.execute_reply": "2024-09-22T15:17:19.187819Z"
    },
    "papermill": {
     "duration": 0.20592,
     "end_time": "2024-09-22T15:17:19.191200",
     "exception": false,
     "start_time": "2024-09-22T15:17:18.985280",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Item_Identifier</th>\n",
       "      <th>Item_Weight</th>\n",
       "      <th>Item_Fat_Content</th>\n",
       "      <th>Item_Visibility</th>\n",
       "      <th>Item_Type</th>\n",
       "      <th>Item_MRP</th>\n",
       "      <th>Outlet_Identifier</th>\n",
       "      <th>Outlet_Establishment_Year</th>\n",
       "      <th>Outlet_Size</th>\n",
       "      <th>Outlet_Location_Type</th>\n",
       "      <th>...</th>\n",
       "      <th>Item_MRP * Outlet_Establishment_Year</th>\n",
       "      <th>Item_Visibility * Item_Weight</th>\n",
       "      <th>Item_Visibility * Outlet_Establishment_Year</th>\n",
       "      <th>Item_Weight * Outlet_Establishment_Year</th>\n",
       "      <th>Item_MRP - Item_Visibility</th>\n",
       "      <th>Item_MRP - Item_Weight</th>\n",
       "      <th>Item_MRP - Outlet_Establishment_Year</th>\n",
       "      <th>Item_Visibility - Item_Weight</th>\n",
       "      <th>Item_Visibility - Outlet_Establishment_Year</th>\n",
       "      <th>Item_Weight - Outlet_Establishment_Year</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>index</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>FDA15</td>\n",
       "      <td>9.30</td>\n",
       "      <td>Low Fat</td>\n",
       "      <td>0.016047</td>\n",
       "      <td>Dairy</td>\n",
       "      <td>249.8092</td>\n",
       "      <td>OUT049</td>\n",
       "      <td>1999</td>\n",
       "      <td>Medium</td>\n",
       "      <td>Tier 1</td>\n",
       "      <td>...</td>\n",
       "      <td>499368.5908</td>\n",
       "      <td>0.149240</td>\n",
       "      <td>32.078555</td>\n",
       "      <td>18590.70</td>\n",
       "      <td>249.793153</td>\n",
       "      <td>240.5092</td>\n",
       "      <td>-1749.1908</td>\n",
       "      <td>-9.283953</td>\n",
       "      <td>-1998.983953</td>\n",
       "      <td>-1989.70</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>DRC01</td>\n",
       "      <td>5.92</td>\n",
       "      <td>Regular</td>\n",
       "      <td>0.019278</td>\n",
       "      <td>Soft Drinks</td>\n",
       "      <td>48.2692</td>\n",
       "      <td>OUT018</td>\n",
       "      <td>2009</td>\n",
       "      <td>Medium</td>\n",
       "      <td>Tier 3</td>\n",
       "      <td>...</td>\n",
       "      <td>96972.8228</td>\n",
       "      <td>0.114127</td>\n",
       "      <td>38.729936</td>\n",
       "      <td>11893.28</td>\n",
       "      <td>48.249922</td>\n",
       "      <td>42.3492</td>\n",
       "      <td>-1960.7308</td>\n",
       "      <td>-5.900722</td>\n",
       "      <td>-2008.980722</td>\n",
       "      <td>-2003.08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>FDN15</td>\n",
       "      <td>17.50</td>\n",
       "      <td>Low Fat</td>\n",
       "      <td>0.016760</td>\n",
       "      <td>Meat</td>\n",
       "      <td>141.6180</td>\n",
       "      <td>OUT049</td>\n",
       "      <td>1999</td>\n",
       "      <td>Medium</td>\n",
       "      <td>Tier 1</td>\n",
       "      <td>...</td>\n",
       "      <td>283094.3820</td>\n",
       "      <td>0.293301</td>\n",
       "      <td>33.503390</td>\n",
       "      <td>34982.50</td>\n",
       "      <td>141.601240</td>\n",
       "      <td>124.1180</td>\n",
       "      <td>-1857.3820</td>\n",
       "      <td>-17.483240</td>\n",
       "      <td>-1998.983240</td>\n",
       "      <td>-1981.50</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>FDX07</td>\n",
       "      <td>19.20</td>\n",
       "      <td>Regular</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>Fruits and Vegetables</td>\n",
       "      <td>182.0950</td>\n",
       "      <td>OUT010</td>\n",
       "      <td>1998</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Tier 3</td>\n",
       "      <td>...</td>\n",
       "      <td>363825.8100</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>38361.60</td>\n",
       "      <td>182.095000</td>\n",
       "      <td>162.8950</td>\n",
       "      <td>-1815.9050</td>\n",
       "      <td>-19.200000</td>\n",
       "      <td>-1998.000000</td>\n",
       "      <td>-1978.80</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>NCD19</td>\n",
       "      <td>8.93</td>\n",
       "      <td>Low Fat</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>Household</td>\n",
       "      <td>53.8614</td>\n",
       "      <td>OUT013</td>\n",
       "      <td>1987</td>\n",
       "      <td>High</td>\n",
       "      <td>Tier 3</td>\n",
       "      <td>...</td>\n",
       "      <td>107022.6018</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>17743.91</td>\n",
       "      <td>53.861400</td>\n",
       "      <td>44.9314</td>\n",
       "      <td>-1933.1386</td>\n",
       "      <td>-8.930000</td>\n",
       "      <td>-1987.000000</td>\n",
       "      <td>-1978.07</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 41 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      Item_Identifier  Item_Weight Item_Fat_Content  Item_Visibility  \\\n",
       "index                                                                  \n",
       "0               FDA15         9.30          Low Fat         0.016047   \n",
       "1               DRC01         5.92          Regular         0.019278   \n",
       "2               FDN15        17.50          Low Fat         0.016760   \n",
       "3               FDX07        19.20          Regular         0.000000   \n",
       "4               NCD19         8.93          Low Fat         0.000000   \n",
       "\n",
       "                   Item_Type  Item_MRP Outlet_Identifier  \\\n",
       "index                                                      \n",
       "0                      Dairy  249.8092            OUT049   \n",
       "1                Soft Drinks   48.2692            OUT018   \n",
       "2                       Meat  141.6180            OUT049   \n",
       "3      Fruits and Vegetables  182.0950            OUT010   \n",
       "4                  Household   53.8614            OUT013   \n",
       "\n",
       "       Outlet_Establishment_Year Outlet_Size Outlet_Location_Type  ...  \\\n",
       "index                                                              ...   \n",
       "0                           1999      Medium               Tier 1  ...   \n",
       "1                           2009      Medium               Tier 3  ...   \n",
       "2                           1999      Medium               Tier 1  ...   \n",
       "3                           1998         NaN               Tier 3  ...   \n",
       "4                           1987        High               Tier 3  ...   \n",
       "\n",
       "      Item_MRP * Outlet_Establishment_Year  Item_Visibility * Item_Weight  \\\n",
       "index                                                                       \n",
       "0                              499368.5908                       0.149240   \n",
       "1                               96972.8228                       0.114127   \n",
       "2                              283094.3820                       0.293301   \n",
       "3                              363825.8100                       0.000000   \n",
       "4                              107022.6018                       0.000000   \n",
       "\n",
       "       Item_Visibility * Outlet_Establishment_Year  \\\n",
       "index                                                \n",
       "0                                        32.078555   \n",
       "1                                        38.729936   \n",
       "2                                        33.503390   \n",
       "3                                         0.000000   \n",
       "4                                         0.000000   \n",
       "\n",
       "       Item_Weight * Outlet_Establishment_Year  Item_MRP - Item_Visibility  \\\n",
       "index                                                                        \n",
       "0                                     18590.70                  249.793153   \n",
       "1                                     11893.28                   48.249922   \n",
       "2                                     34982.50                  141.601240   \n",
       "3                                     38361.60                  182.095000   \n",
       "4                                     17743.91                   53.861400   \n",
       "\n",
       "       Item_MRP - Item_Weight  Item_MRP - Outlet_Establishment_Year  \\\n",
       "index                                                                 \n",
       "0                    240.5092                            -1749.1908   \n",
       "1                     42.3492                            -1960.7308   \n",
       "2                    124.1180                            -1857.3820   \n",
       "3                    162.8950                            -1815.9050   \n",
       "4                     44.9314                            -1933.1386   \n",
       "\n",
       "       Item_Visibility - Item_Weight  \\\n",
       "index                                  \n",
       "0                          -9.283953   \n",
       "1                          -5.900722   \n",
       "2                         -17.483240   \n",
       "3                         -19.200000   \n",
       "4                          -8.930000   \n",
       "\n",
       "       Item_Visibility - Outlet_Establishment_Year  \\\n",
       "index                                                \n",
       "0                                     -1998.983953   \n",
       "1                                     -2008.980722   \n",
       "2                                     -1998.983240   \n",
       "3                                     -1998.000000   \n",
       "4                                     -1987.000000   \n",
       "\n",
       "       Item_Weight - Outlet_Establishment_Year  \n",
       "index                                           \n",
       "0                                     -1989.70  \n",
       "1                                     -2003.08  \n",
       "2                                     -1981.50  \n",
       "3                                     -1978.80  \n",
       "4                                     -1978.07  \n",
       "\n",
       "[5 rows x 41 columns]"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Run deep feature synthesis with transformation primitives\n",
    "feature_matrix, feature_defs = ft.dfs(\n",
    "    entityset=es,\n",
    "    target_dataframe_name='data_1',\n",
    "    max_depth=3,\n",
    "    trans_primitives=['add_numeric', 'multiply_numeric', 'subtract_numeric', 'divide_numeric']  # Remove invalid primitive\n",
    ")\n",
    "\n",
    "# Display the feature matrix\n",
    "feature_matrix.head()\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "6f0dd288",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-22T15:17:19.234397Z",
     "iopub.status.busy": "2024-09-22T15:17:19.233445Z",
     "iopub.status.idle": "2024-09-22T15:17:19.240885Z",
     "shell.execute_reply": "2024-09-22T15:17:19.239877Z"
    },
    "papermill": {
     "duration": 0.031757,
     "end_time": "2024-09-22T15:17:19.243116",
     "exception": false,
     "start_time": "2024-09-22T15:17:19.211359",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "\"feature_matrix, feature_defs = ft.dfs(\\n    entityset=es,\\n    target_dataframe_name='data_1',\\n    max_depth=2,\\n    trans_primitives=['add_numeric', 'multiply_numeric', 'subtract_numeric', 'divide_numeric', 'cum_sum', 'percentile']\\n)\\n\\n# Create a custom ratio feature\\nagent['Item_MRP_to_Weight'] = agent['Item_MRP'] / agent['Item_Weight']\\nagent['Weight_to_Year'] = agent['Item_Weight'] / agent['Outlet_Establishment_Year']\\n\\nfeature_matrix, feature_defs = ft.dfs(\\n    entityset=es,\\n    target_dataframe_name='data_1',\\n    max_depth=3,  # Try increasing the depth\\n    trans_primitives=['add_numeric', 'multiply_numeric', 'subtract_numeric', 'divide_numeric']\\n)\\n\\n# Display the feature matrix\\nprint(feature_matrix.shape)  # Check if the number of columns increases\\nfeature_matrix.head()\\n\""
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Deep Feature Synthesis with depth=3 can't get the result so try this \n",
    "'''feature_matrix, feature_defs = ft.dfs(\n",
    "    entityset=es,\n",
    "    target_dataframe_name='data_1',\n",
    "    max_depth=2,\n",
    "    trans_primitives=['add_numeric', 'multiply_numeric', 'subtract_numeric', 'divide_numeric', 'cum_sum', 'percentile']\n",
    ")\n",
    "\n",
    "# Create a custom ratio feature\n",
    "agent['Item_MRP_to_Weight'] = agent['Item_MRP'] / agent['Item_Weight']\n",
    "agent['Weight_to_Year'] = agent['Item_Weight'] / agent['Outlet_Establishment_Year']\n",
    "\n",
    "feature_matrix, feature_defs = ft.dfs(\n",
    "    entityset=es,\n",
    "    target_dataframe_name='data_1',\n",
    "    max_depth=3,  # Try increasing the depth\n",
    "    trans_primitives=['add_numeric', 'multiply_numeric', 'subtract_numeric', 'divide_numeric']\n",
    ")\n",
    "\n",
    "# Display the feature matrix\n",
    "print(feature_matrix.shape)  # Check if the number of columns increases\n",
    "feature_matrix.head()\n",
    "'''"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "12988f14",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-22T15:17:19.285166Z",
     "iopub.status.busy": "2024-09-22T15:17:19.284479Z",
     "iopub.status.idle": "2024-09-22T15:17:19.291821Z",
     "shell.execute_reply": "2024-09-22T15:17:19.290745Z"
    },
    "papermill": {
     "duration": 0.0309,
     "end_time": "2024-09-22T15:17:19.294100",
     "exception": false,
     "start_time": "2024-09-22T15:17:19.263200",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<Feature: Item_Identifier>,\n",
       " <Feature: Item_Weight>,\n",
       " <Feature: Item_Fat_Content>,\n",
       " <Feature: Item_Visibility>,\n",
       " <Feature: Item_Type>,\n",
       " <Feature: Item_MRP>,\n",
       " <Feature: Outlet_Identifier>,\n",
       " <Feature: Outlet_Establishment_Year>,\n",
       " <Feature: Outlet_Size>,\n",
       " <Feature: Outlet_Location_Type>,\n",
       " <Feature: Outlet_Type>,\n",
       " <Feature: Item_MRP + Item_Visibility>,\n",
       " <Feature: Item_MRP + Item_Weight>,\n",
       " <Feature: Item_MRP + Outlet_Establishment_Year>,\n",
       " <Feature: Item_Visibility + Item_Weight>,\n",
       " <Feature: Item_Visibility + Outlet_Establishment_Year>,\n",
       " <Feature: Item_Weight + Outlet_Establishment_Year>,\n",
       " <Feature: Item_MRP / Item_Visibility>,\n",
       " <Feature: Item_MRP / Item_Weight>,\n",
       " <Feature: Item_MRP / Outlet_Establishment_Year>,\n",
       " <Feature: Item_Visibility / Item_MRP>,\n",
       " <Feature: Item_Visibility / Item_Weight>,\n",
       " <Feature: Item_Visibility / Outlet_Establishment_Year>,\n",
       " <Feature: Item_Weight / Item_MRP>,\n",
       " <Feature: Item_Weight / Item_Visibility>,\n",
       " <Feature: Item_Weight / Outlet_Establishment_Year>,\n",
       " <Feature: Outlet_Establishment_Year / Item_MRP>,\n",
       " <Feature: Outlet_Establishment_Year / Item_Visibility>,\n",
       " <Feature: Outlet_Establishment_Year / Item_Weight>,\n",
       " <Feature: Item_MRP * Item_Visibility>,\n",
       " <Feature: Item_MRP * Item_Weight>,\n",
       " <Feature: Item_MRP * Outlet_Establishment_Year>,\n",
       " <Feature: Item_Visibility * Item_Weight>,\n",
       " <Feature: Item_Visibility * Outlet_Establishment_Year>,\n",
       " <Feature: Item_Weight * Outlet_Establishment_Year>,\n",
       " <Feature: Item_MRP - Item_Visibility>,\n",
       " <Feature: Item_MRP - Item_Weight>,\n",
       " <Feature: Item_MRP - Outlet_Establishment_Year>,\n",
       " <Feature: Item_Visibility - Item_Weight>,\n",
       " <Feature: Item_Visibility - Outlet_Establishment_Year>,\n",
       " <Feature: Item_Weight - Outlet_Establishment_Year>]"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "feature_defs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "bdd28636",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-22T15:17:19.336046Z",
     "iopub.status.busy": "2024-09-22T15:17:19.335592Z",
     "iopub.status.idle": "2024-09-22T15:17:19.342320Z",
     "shell.execute_reply": "2024-09-22T15:17:19.341242Z"
    },
    "papermill": {
     "duration": 0.030266,
     "end_time": "2024-09-22T15:17:19.344556",
     "exception": false,
     "start_time": "2024-09-22T15:17:19.314290",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(8523, 41)"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "feature_matrix.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b2fdd0a4",
   "metadata": {
    "papermill": {
     "duration": 0.020366,
     "end_time": "2024-09-22T15:17:19.385768",
     "exception": false,
     "start_time": "2024-09-22T15:17:19.365402",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 861950,
     "sourceId": 1469501,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 1120859,
     "sourceId": 1882037,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 1124051,
     "sourceId": 1887011,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 3276334,
     "sourceId": 7003111,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 4390452,
     "sourceId": 7539897,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30761,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.14"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 25.39031,
   "end_time": "2024-09-22T15:17:20.127975",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-09-22T15:16:54.737665",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
